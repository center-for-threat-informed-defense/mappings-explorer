{% block set_version %}
<section id="version-select" class="version-select">
<meta id="version-combos" data-versions="{{valid_versions}}"">

  <div class="container" data-aos="fade-up">
    <div class="row justify-content-left">
      <form class="col-12" onsubmit="handleSubmission(event)">
        <h2>CHOOSE YOUR VERSIONS</h2>
        <div class="row col-12" style="display: flex;">
        {% if versions %}
          <div class="col-sm-4 col-md-3 form-group">
            <p>{{control}} Version</p>
            <div class="custom-select" id="control_version">
            <select name="control-version" id="control_version_select">
                <option value="0">Select version:</option>
              {% for v in versions %}
                <option>{{v}}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          {% endif %}
          <div class="col-sm-4 col-md-3 form-group">
            <p>ATT&CK Version</p>
            <div class="custom-select" id="attack_version">
            <select name="attack-version" id="attack_version_select">
              <option value="0">Select version:</option>
              {% for v in attackVersions %}
                <option>{{v}}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          <div class="col-sm-4 col-md-3 form-group">
            <p>ATT&CK Domain</p>
            <div class="custom-select" id="attack_domain">
            <select name="domain" id="attack_domain_select">
              <option value="0">Select version:</option>
              {% for d in domains %}
                <option>{{d}}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          <div class="col-sm-4 col-md-3 form-group" style="margin-top: 28px;">
            <button class="btn-pill" style="border: none;">See Mappings</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</section>
<script>

/* parse the valid version combinations found in the meta tag */
v = document.getElementById("version-combos")
z = v.getAttribute('data-versions')
x = z.replaceAll(`'`, ``).replaceAll(` `, ``)
valid_versions = x.split("),(")

for(var i=0; i < valid_versions.length; i++) {
  valid_versions[i] = valid_versions[i].replaceAll("(", "").replaceAll(")", "").replaceAll("[", "").replaceAll("]", "").split(",")
}

var x, i, j, l, ll, selElmnt, a, b, c;
/*look for any elements with the class "custom-select":*/
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /*for each element, create a new DIV that will act as the selected item:*/
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /*for each element, create a new DIV that will contain the option list:*/
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /*for each option in the original select element,
    create a new DIV that will act as an option item:*/
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
      console.log("click on  ", e.srcElement)

      // add our own handling of option states to the boilerplate click handling
      let control_version = document.getElementById("control_version_select").value;
      let attack_version = document.getElementById("attack_version_select").value;
      let attack_domain = document.getElementById("attack_domain_select").value;
      if (e.srcElement.parentNode.parentNode.id == "control_version") {
        control_version = e.srcElement.innerHTML
      } else if (e.srcElement.parentNode.parentNode.id == "attack_version") {
        attack_version = e.srcElement.innerHTML
      } else if (e.srcElement.parentNode.parentNode.id == "attack_domain") {
        attack_domain = e.srcElement.innerHTML
      }
      // see if the current selection combination is valid, and if not click on the first available valid combination
      attackOptions = [];
      versionOptions = [];
      domainOptions = [];
      if (e.srcElement.parentNode.parentNode.id == "attack_version") {
        versionOptions = parseValidOptions(e.srcElement.innerHTML, "control_version", valid_versions)
        domainOptions = parseValidOptions(e.srcElement.innerHTML, "attack_domain", valid_versions)
        setStates([
          {selectId: 'control_version', options: versionOptions, currentValue: control_version},
          {selectId: 'attack_domain', options: domainOptions, currentValue: attack_domain}
        ])
      } else if(e.srcElement.parentNode.parentNode.id == "control_version"){
        attackOptions = parseValidOptions(e.srcElement.innerHTML, "attack_version", valid_versions)
        domainOptions = parseValidOptions(e.srcElement.innerHTML, "attack_domain", valid_versions)
        setStates([
          {selectId: 'attack_version', options: attackOptions, currentValue: attack_version},
          {selectId: 'attack_domain', options: domainOptions, currentValue: attack_domain}
        ])
      }
      else {
        versionOptions = parseValidOptions(e.srcElement.innerHTML, "control_version", valid_versions)
        attackOptions = parseValidOptions(e.srcElement.innerHTML, "attack_version", valid_versions)
        setStates([
          {selectId: 'control_version', options: versionOptions, currentValue: control_version},
          {selectId: 'attack_version', options: attackOptions, currentValue: attack_version}
        ])
      }
      /*when an item is clicked, update the original select box,
      and the selected item:*/
      var y, i, k, s, h, sl, yl;
      s = this.parentNode.parentNode.getElementsByTagName("select")[0];
      sl = s.length;
      h = this.parentNode.previousSibling;
      for (i = 0; i < sl; i++) {
        if (s.options[i].innerHTML == this.innerHTML) {
          s.selectedIndex = i;
          h.innerHTML = this.innerHTML;
          y = this.parentNode.getElementsByClassName("same-as-selected");
          yl = y.length;
          for (k = 0; k < yl; k++) {
            y[k].removeAttribute("class");
          }
          this.setAttribute("class", "same-as-selected");
          break;
        }
      }
      h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
      /*when the select box is clicked, close any other select boxes,
      and open/close the current select box:*/
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
}
function closeAllSelect(elmnt) {
  /*a function that will close all select boxes in the document,
  except the current select box:*/
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}
/*if the user clicks anywhere outside the select box,
then close all select boxes:*/
document.addEventListener("click", closeAllSelect);

/* set the states of the options in the version dropdowns
   and clicks one if not a valid version combo */
function setStates(valuesToValidate){
  valuesToValidate.forEach(value => {
    selectElement = document.getElementById(value.selectId);
    selectElementOptions = selectElement.getElementsByClassName("select-items")[0].children;
    for (i = 0; i < selectElementOptions.length; i++) {
      if(value.options.includes(selectElementOptions[i].innerHTML)){
        selectElementOptions[i].setAttribute("class", "valid-option");
      }
      else {
        selectElementOptions[i].setAttribute("class", "invalid-option");
      }
    }
    if(!value.options.includes(value.currentValue)){
      selectElement.getElementsByClassName("valid-option")[0].click();
    }
  })
}

/* find what versions for attack or control are valid given a click on an element */
function parseValidOptions(originalValue, returnValue, valid_versions) {
  attackOptions = [];
  versionOptions = [];
  domainOptions = [];
  for(var i=0; i < valid_versions.length; i++) {
    let row = valid_versions[i];
    for(var ii = 0; ii<row.length; ii++) {
      let element = row[ii]
      if (element == originalValue) {
        versionOptions.push(row[0])
        attackOptions.push(row[1])
        domainOptions.push(row[2])
      }
    }
  }
  if (returnValue == "attack_version") { return attackOptions }
  else if (returnValue == "control_version") { return versionOptions }
  else { return domainOptions }
}
/* click on an item in the control version dropdown */
function setValue(id, value){
  d = document.getElementById(id);
  options = d.getElementsByClassName("select-items")[0].children;
  if (!value) {
    options[0].click();
  }
  for (i = 0; i < options.length; i++) {
    if (options[i].innerHTML.toLowerCase() == value) {
      options[i].click();
      return;
    }
  }
}
/* on load, check if there are any versions specified in the url and set them accordingly
   if no versions specified, click on first available attack value
   and corresponding control will automatically get set */
function parseParams() {
  let attackVersion = '';
  let controlVersion = '';
  let attackDomain = '';
  let uri = window.location.pathname;
  let params = uri.split("/").filter(n => n);
  if (params.length > 4){
    attackDomain = params[params.length - 1].split("-")[1];
    if (attackDomain) {
      setValue("attack_domain", attackDomain)
    }
    controlVersion = params[params.length - 2].split("-")[1];
    if (controlVersion) {
      setValue("control_version", controlVersion)
    }
    attackVersion = params[params.length - 3].split("-")[1];
    if (attackVersion) {
      setValue("attack_version", attackVersion)
    }
  }
  else {
    setValue("attack_version", "")
  }
}
/* handle click on see mappings button- route to the new version url */
function handleSubmission(event) {
  event.preventDefault()
  let uri = window.location.pathname;
  let params = uri.split("/").filter(n => n);
  let newControl = document.getElementById("control_version_select").value
  let newAttack = document.getElementById("attack_version_select").value
  let newDomain = document.getElementById("attack_domain_select").value.toLowerCase()
  if (params.length > 4) {
    params[params.length-1] = "domain-" + newDomain
    params[params.length-2] = params[params.length-4] + "-" + newControl
    params[params.length-3] = "attack-" + newAttack
  }
  else {
    params.push("attack-" + newAttack)
    params.push("domain-" + newDomain)
    params.push(params[params.length-3] + "-" + newControl)
  }
  let newUrl = params.join("/")
  window.location = "/" + newUrl + "/"
}

window.onload = parseParams
</script>

{% endblock set_version %}
