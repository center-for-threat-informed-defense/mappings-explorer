{% block set_version %}
<section id="version-select" class="version-select">
  <div class="container" data-aos="fade-up">


    <div class="row justify-content-left">
      <form class="col-12" onsubmit="handleSubmission(event)">
        <h2>CHOOSE YOUR VERSIONS</h2>
        <div class="row col-12" style="display: flex;">
        {% if versions %}
          <div class="col-sm-4 col-md-3 form-group">
            <p>{{control}} Version</p>
            <div class="custom-select">
            <select name="control-version" id="control_version" >
                <option value="0">Select version:</option>
              {% for v in versions %}
                <option>{{v}}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          {% endif %}
          <div class="col-sm-4 col-md-3 form-group">
            <p>ATT&CK Version</p>
            <div class="custom-select">
            <select name="attack-version" id="attack_version">
              <option value="0">Select version:</option>
              {% for v in attackVersions %}
                <option>{{v}}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          <div class="col-sm-4 col-md-3 form-group">
            <p>ATT&CK Domain</p>
            <div class="custom-select">
            <select name="domain" id="attack_domain">
              <option value="0">Select version:</option>
              {% for d in domains %}
                <option>{{ d|capitalize }}</option>
              {% endfor %}
            </select>
            </div>
          </div>
          <div class="col-sm-4 col-md-3 form-group" style="margin-top: 28px;">
            <button class="btn-pill" style="border: none;">See Mappings</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</section>
<script>
  let attackVersion = '';
  let controlVersion = '';
  let uri = window.location.pathname;
  let params = uri.split("/").filter(n => n);

  controlVersion = params[params.length -1].split("-")[1];
  if (controlVersion) {
    document.getElementById("control_version").value = controlVersion;
  } else {
    document.getElementById("control_version").selectedIndex = "1";
}
  attackVersion = params[params.length -2].split("-")[1];
  if (attackVersion) {
    document.getElementById("attack_version").value = attackVersion;
  } else {
    document.getElementById("attack_version").selectedIndex = "1";
}
    document.getElementById("attack_domain").selectedIndex = "1";

  function handleSubmission(event) {
    event.preventDefault()
    let newControl = document.getElementById("control_version").value
    let newAttack = document.getElementById("attack_version").value
    if (params.length > 3) {
      params[params.length-1] = params[params.length-3] + "-" + newControl
      params[params.length-2] = "attack-" + newAttack
    }
    else {
      params.push("attack-" + newAttack)
      params.push(params[params.length-2] + "-" + newControl)
    }
    let newUrl = params.join("/")
    window.location = "/" + newUrl + "/"
  }
</script>
<script>
var x, i, j, l, ll, selElmnt, a, b, c;
/*look for any elements with the class "custom-select":*/
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /*for each element, create a new DIV that will act as the selected item:*/
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /*for each element, create a new DIV that will contain the option list:*/
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /*for each option in the original select element,
    create a new DIV that will act as an option item:*/
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /*when an item is clicked, update the original select box,
        and the selected item:*/
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
      /*when the select box is clicked, close any other select boxes,
      and open/close the current select box:*/
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
}
function closeAllSelect(elmnt) {
  /*a function that will close all select boxes in the document,
  except the current select box:*/
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}
/*if the user clicks anywhere outside the select box,
then close all select boxes:*/
document.addEventListener("click", closeAllSelect);
</script>

{% endblock set_version %}
