{% extends "base.html.j2" %} {% block content %}
<div id="search">
    <Search url_prefix="{{url_prefix}}"></Search>
</div>
<script src="{{url_prefix}}static/lunr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>

<script>
  const Search = {
    template: `
      <div>
        <section id="header-container" class="header-container">
          <div class="container" data-aos="fade-up">
            {% include "_breadcrumbs.html.j2" %}
            <h1 style="text-transform: uppercase" class="text-center">
              <span class="highlight">Search</span> for Mappings
            </h1>
          </div>
          <div class="input-group search-bar rounded">
            <span class="input-group-text transparent border-0" id="search-addon">
              <a onclick="handleSearch">
                <img
                  :src="url_prefix + 'static/img/search.svg'"
                  alt="search"
                  style="height: 20px"
              /></a>
            </span>
            <input
              type="search"
              id="search-page-search-input"
              class="form-control transparent border-none search-bar-input rounded"
              placeholder="Search"
              aria-label="Search"
              aria-describedby="search-addon"
              width="100"
              v-model="searchModel"
              v-on:keyup.enter="handleKeypress($event)"
            />
          </div>
        </section>
        <div class="loader" v-if="loading"></div>
        <div class="container" data-aos="fade-up">
          <form class="col-12 version-select">
            <div class="row col-12" style="display: flex;">
              <div class="col-md-2 col-sm-4 form-group" @focusout="handleOutsideClick" tabindex="-1">
                <p>ATT&CK Version</p>
                <div class="form-control select" @click="attackSelectOpen = !attackSelectOpen">
                  <span class="selected-item">[[ selectedAttackVersion ]]</span>
                </div>
                <div v-if="attackSelectOpen" class="dropdown-items">
                  <div
                    :class="{
                      'dropdown-item': true,
                      'selected-option': selectedAttackVersion === attackVersion
                    }"
                    v-for="attackVersion in attackVersionsInResults"
                    :key="attackVersion"
                    @click="selectedAttackVersion = attackVersion; pageNum = 1; attackSelectOpen = false;"
                  >
                    <span class="dropdown-item-text">[[ attackVersion ]]</span>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
        <section>
          <div class="container" data-aos="fade-up" v-if="resultsLength">
            <h2>PAGES FOR "[[ searchString.toUpperCase() ]]"
              <span v-if="selectedAttackVersion !== 'All Versions'">ATT&CK V[[selectedAttackVersion]]</span>
              <span v-else> All ATT&CK Versions</span>
            </h2>
            <div
              class="result-container"
              v-for="result in currentPageResultKeys"
              :key="result"
            >
              <div v-if="displayedResults[result].ref.startsWith('external/')">
                <a class="result-title" :href="url_prefix + displayedResults[result].ref"> [[ displayedResults[result].pageData.name ]] </a>
                <div class="result-subtext">
                  <span>Page for [[ getStringFromUrl(displayedResults[result].ref, 'external/') ]] control [[ displayedResults[result].pageData.name]]</span>
                  <span class="float-right">
                    ATT&CK Version: <b>[[ getStringFromUrl(displayedResults[result].ref, "attack-") ]]</b>
                    ATT&CK Domain: <b>[[ getStringFromUrl(displayedResults[result].ref, "domain-") ]]</b>
                  </span>
                </div>
              </div>
              <div v-else>
                <a class="result-title" :href="url_prefix + displayedResults[result].ref"> [[ displayedResults[result].pageData.id ]] [[ displayedResults[result].pageData.name ]]</a>
                <div class="result-subtext">
                  <span>
                    Page for ATT&CK [[ displayedResults[result].pageData.id.includes('.') ? 'subtechnique' : 'technique' ]]
                    [[ displayedResults[result].pageData.id ]] [[ displayedResults[result].pageData.name]]
                  </span>
                  <span class="float-right">
                    ATT&CK Version: <b>[[ getStringFromUrl(displayedResults[result].ref, "attack-") ]]</b>
                    ATT&CK Domain: <b>[[ getStringFromUrl(displayedResults[result].ref, "domain-") ]]</b>
                  </span>
                </div>
              </div>
            </div>
            <nav v-if="amountOfPages > 1">
              <span>
                Showing [[ parseInt(currentPageResultKeys[0]) + 1 ]]  to [[ parseInt(currentPageResultKeys[currentPageResultKeys.length - 1]) + 1 ]] of [[ resultsLength ]] results
                <select v-model="itemsPerPage">
                  <option
                    v-for="item in itemPerPageOptions.filter(option => option <= resultsLength)"
                    :value="item"
                  >
                    [[ item ]]
                  </option>
                </select>
                items per page
              </span>
              <ul class="pagination float-right">
                <li class="pagination-item previous" v-if="pageNum > 1" @click="pageNum --">
                  <img
                    class="icon"
                    src="{{url_prefix}}static/img/chevron-left-purple.svg"
                    alt="previous"
                  />
                </li>
                <li
                  :class="{
                    'pagination-item': true,
                    'previous': index === 1 && pageNum === 1,
                    'next': index === amountOfPages && pageNum === index,
                    'pagination-item--active': pageNum === index
                  }"
                  v-for="index in amountOfPages"
                  @click="pageNum = index"
                >
                 [[ index ]]
                </li>
                <li class="pagination-item next" v-if="pageNum < amountOfPages" @click="pageNum++">
                  <img
                    class="icon"
                    src="{{url_prefix}}static/img/chevron-right-purple.svg"
                    alt="next"
                  />
                </li>
              </ul>
            </nav>
          </div>
          <div class="container" data-aos="fade-up" v-else>
            <h2>No Pages Match Search "[[ searchString ]]"</h2>
          </div>
        </section>
      </div>
  `,
    delimiters: ["[[", "]]"],
    props: {
      url_prefix: String,
    },
    data() {
      return {
        attackSelectOpen: false,
        attackVersionsInResults: [],
        index: undefined,
        itemsPerPage: 10,
        itemPerPageOptions: [10, 25, 50, 100],
        loading: true,
        pageNum: 1,
        results: {},
        searchModel: "",
        searchString: "",
        selectedAttackVersion: undefined,
        webPages: undefined,
      };
    },
    computed:{
      amountOfPages(){
        return Math.ceil(this.resultsLength / this.itemsPerPage);
      },
      currentPageResultKeys(){
        // get results that are on the current page
        let filteredResultKeys = Object.keys(this.displayedResults).filter((r) => {
          return (
            (r >= (this.pageNum - 1) * this.itemsPerPage) &&
            (r <= (this.pageNum - 1) * this.itemsPerPage + this.itemsPerPage - 1)
          )
        });
        return filteredResultKeys;
      },
      displayedResults(){
        if(this.results?.results){
          if(this.selectedAttackVersion !== "All Versions"){
            let filteredResults = this.results.results.filter(result => {
              return this.getStringFromUrl(result.ref, "attack-") === this.selectedAttackVersion;
            });
            return filteredResults;
          }
          else {
            return this.results.results;
          }
        }
        return [];
      },
      resultsLength(){
        return Object.keys(this.displayedResults).length;
      }
    },
    methods: {
      /**
       * create an array with all attack versions that appear in the results
       */
      getAttackVersionsInResults(){
        let attackVersions = [];
        this.results.results.forEach(result => {
          let attackVersion = this.getStringFromUrl(result.ref, "attack-");
          !attackVersions.includes(attackVersion) && attackVersions.push(attackVersion);
        })
        this.attackVersionsInResults = attackVersions.sort((a, b) => parseFloat(a) - parseFloat(b));
        // if the selected Attack version is not yet set, set to the most recent
        // attack version that appears in the results
        !this.selectedAttackVersion && this.setSelectedAttackVersion();
        this.attackVersionsInResults.push("All Versions");
      },

      /**
       * Extracts a string from a url
       * Arguments:
       * url - url to search for the string in
       * string - string to begin search after
       * currently works for
       * - attack version: gets url beginning with `attack-` and ending with the next `/`
       * - domain: gets url beginning with `domain-` and ending with the next `/`
       * - mapping framework: gets url beginning with `external/` and ending with the next `/`
       */
      getStringFromUrl(url, string) {
        let returnStringAndOn = url.substring(url.indexOf(string) + string.length);
        let returnString = returnStringAndOn.substring(0, returnStringAndOn.indexOf("/"));
        if (returnString === "enterprise" || returnString === "mobile" || returnString === 'veris' || returnString === 'azure'){
          return returnString.charAt(0).toUpperCase() + returnString.slice(1);
        }
        else if(returnString === 'ics' || returnString === 'aws' || returnString === 'gcp' || returnString === 'cve'){
          return returnString.toUpperCase();
        }
        else if (returnString === 'nist') {
          return 'NIST 800-53';
        }
        return returnString
      },
      handleItemPerPageChange(){
        console.log("IN HERE!")
        this.pageNum = 1;
      },
      /**
       * One enter, searches for string entered in input on the search page.
       */
      handleKeypress(event){
        if (event.key === "Enter") {
          this.handleSearch();
        }
      },

      /**
       * Searches for string entered in input on the search page.
       */
      handleSearch(){
        this.searchString = this.searchModel;
        let newurl = `${window.location.origin}${window.location.pathname}?search=${this.searchString}`
        window.history.pushState({path:newurl},'',newurl);
        document.getElementById("nav-search-input").value = this.searchString;
        this.searchMain();
      },

      /**
       * closes attack version select dropdown on outside click
       */
      handleOutsideClick() {
        this.attackSelectOpen = false;
      },

      /**
       * Initialize the search index.
       */
       async initializeSearch(indexUrl) {
        indexFile = await fetch(indexUrl);
        fileBuffer = await indexFile.arrayBuffer();
        let zip = new JSZip();
        let loadedZip = await zip.loadAsync(fileBuffer);
        for (const filename of Object.keys(loadedZip.files)) {
          let indexData = await loadedZip.files[filename].async('string');
          let indexJson = JSON.parse(indexData);
          this.webPages = indexJson["pages"];
          this.index = lunr.Index.load(indexJson["index"]);
        }
      },

      /**
       * Run a query on the search index and return the results.
       */
      searchIndex(query) {
        if (!this.index) {
          console.error("Search index is not initialized.");
          return;
        }

        const allResults = this.index.search(query);
        for (const result of allResults) {
          result.pageData = this.webPages[result.ref];
        }

        return {
          query,
          results: allResults,
          totalCount: allResults.length,
        };
      },

      searchMain() {
        const url = new URL(window.location.href);
        if (url.searchParams.get("search")) {
          let search = url.searchParams.get("search");
          this.searchString = search;
          this.searchModel = search;
          document.getElementById("nav-search-input").value = search;
          this.results = this.searchIndex(this.searchString);
          this.getAttackVersionsInResults();
        }
      },

      setSelectedAttackVersion(){
        let attackVersionNumbers = this.attackVersionsInResults.map(Number);
        this.selectedAttackVersion = Math.max(...attackVersionNumbers).toString();
      },

    },

    watch: {
      itemsPerPage(newValue, previousValue){
        let previousFirstItemDisplayed = (this.pageNum - 1) * previousValue;
        for(let page = 0; page < this.amountOfPages; page++) {
          if(page * newValue <= previousFirstItemDisplayed && page * newValue + newValue -1 >= previousFirstItemDisplayed) {
            this.pageNum = page + 1;
            return;
          }
        }
      }
    },

    async mounted() {
      await this.initializeSearch(`${this.url_prefix}static/lunr-index.zip`);
      this.loading = false;
      this.searchMain();
    },
  };

  Vue.createApp({
    components: {
      Search
    }
  }).mount("#search");

</script>

<style>
  .result-container {
    background-color: white;
    padding: 20px;
    box-shadow: 2px 2px 4px #bdbdbd;
    margin-bottom: 10px;
    border-radius: 5px;
  }
  .result-subtext {
    margin-left: 1rem;
  }
  .result-title {
    font-size: 18px;
  }
  .pagination-item {
    padding: 10px;
    background-color: white;
    cursor: pointer;
    border-right: 1px solid #dee2e6;
    border-top: 1px solid #dee2e6;
    border-bottom: 1px solid #dee2e6;
    min-width: 40px;
    text-align: center;
    color: #6241c5;
  }
  .pagination-item--active {
    background-color: #6241c5;
    color: white;
  }
  .pagination-item:hover {
    background-color: #dee2e6;
    color: #495057;
  }
  .pagination-item--active:hover {
    background-color: #6241c5;
    color: white;
  }
  .next {
    border-top-right-radius: 5px;
    border-bottom-right-radius: 5px;
  }
  .previous {
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
    border-left: 1px solid #dee2e6;
  }
  .float-right {
    float: right;
  }
  .search-bar {
    width: 50%;
    margin: auto;
    border: 1px solid #495057;
  }
  .border-none {
    border: none;
  }
  .transparent {
    background-color: transparent;
  }
  .search-bar-input:focus {
    border: none;
    background: transparent;
    box-shadow: none;
  }
  .loader {
    border: 16px solid #f3f3f3; /* Light grey */
    border-top: 16px solid #005b94;
    border-radius: 50%;
    width: 120px;
    height: 120px;
    margin: auto;
    animation: spin 2s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .dropdown-items {
    position: absolute;
    background-color: white;
    box-shadow: 2px 2px 2px #bdbdbd;
    border-radius: 5px;
    z-index: 999;
    width: 150px;
  }

  .select {
    width: 150px;
    cursor: pointer;
  }

  .dropdown-item {
    cursor: pointer;
    border-top: 1px solid #dbdbd9;
  }

  .dropdown-item:hover {
    background-color: #ededeb;
  }

  .dropdown-item-text {
    margin-left: 4px !important;
    padding: 0.375rem 0.75rem;
    font-size: 1rem !important;
    font-weight: 400 !important;
  }

  .invalid-option {
    color: #bdbdbd !important;
  }

  .selected-item {
    font-size: 1.25rem !important;
  }

  .selected-option {
    background-color: #ededeb;
  }
</style>
{% endblock content %}

