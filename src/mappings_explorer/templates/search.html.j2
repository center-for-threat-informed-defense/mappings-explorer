{% extends "base.html.j2" %} {% block content %}
<div id="search">
  <Search url_prefix="{{url_prefix}}"></Search>
</div>

<script src="{{url_prefix}}static/lunr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script
  src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
  integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
  crossorigin="anonymous"
></script>
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
  crossorigin="anonymous"
></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js"></script>
<script src="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.js"></script>
<script src="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table-vue.min.js"></script>

<script>
  const Search = {
    template: `
      <div>
        <section id="header-container" class="header-container">
          <div class="container" data-aos="fade-up">
            <h1 style="text-transform: uppercase">
              <span class="highlight">Search Result</span> Mappings
            </h1>
          </div>
        </section>
        <section class="mapping-table">
          <div class="container" data-aos="fade-up">
            <div class="row justify-content-left">
              <div class="table-responsive table-outer">
                <div class="form-outline mb-4">
                  <bootstrap-table class="table-borderless" :columns="headers" :data="filteredMappings" :options="options"></bootstrap-table>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>
  `,
    delimiters: ["[[", "]]"],
    components: {
      BootstrapTable: BootstrapTable,
    },
    props: {
      url_prefix: String,
    },
    data() {
      return {
        webPages: undefined,
        index: undefined,
        filteredMappings: [],
        options: {
          search: true,
          pagination: true,
          sortable: true,
        },
      };
    },
    methods: {
      /**
       * Initialize the search index.
       */
      async initializeSearch(indexUrl) {
        const indexResponse = await fetch(indexUrl);
        const indexJson = await indexResponse.json();
        this.webPages = indexJson["pages"];
        this.index = lunr.Index.load(indexJson["index"]);
        console.log("Search index is initialized.");
      },

      /**
       * Run a query on the search index and return the results.
       */
      searchIndex(query) {
        if (!this.index) {
          console.error("Search index is not initialized.");
          return;
        }

        const allResults = this.index.search(query);
        for (const result of allResults) {
          result.pageData = this.webPages[result.ref];
        }

        return {
          query,
          results: allResults,
          totalCount: allResults.length,
        };
      },
      async getAllMappings() {
        let allMappingsURL = `${window.location.origin}/static/all_mappings.json`;
        const response = await fetch(allMappingsURL);
        const responseJSON = await response.json();
        return responseJSON;
      },
      async searchMain() {
        const url = new URL(window.location.href);
        let allMappings = await this.getAllMappings();
        if (url.searchParams.get("search")) {
          let search = url.searchParams.get("search");
          document.getElementById("nav-search-input").value = search;
          this.initializeSearch(
            `${window.location.origin}/static/lunr-index.json`
          ).then(() => {
            let results = this.searchIndex(search);
            let filteredMappings = [];
            results.results.forEach((result) => {
              filteredMappings.push(
                allMappings.filter((mapping) => {
                  return (
                    mapping.attack_object_id?.includes(result.pageData.name) ||
                    mapping.attack_object_id?.includes(result.ref) ||
                    mapping.group?.includes(result.pageData.name) ||
                    mapping.attack_object_id?.includes(result.ref) ||
                    mapping.capability_id?.includes(result.pageData.name) ||
                    mapping.attack_object_id?.includes(result.ref)
                  );
                })
              );
            });
            this.filteredMappings = filteredMappings.flat();
          });
        }
      },
    },
    computed: {
      headers() {
        let urlPrefix = this.url_prefix;
        return [
          {
            field: "mapping_framework",
            title: "Mapping Framework",
            sortable: true,
            formatter: function (value, row) {
              let href = `${urlPrefix}external/${row.mapping_framework_id}/`;
              return `<a href=${href} id="mapping-framework"> ${value} </a>`;
            },
          },
          {
            field: "attack_object_id",
            title: "ATT&CK ID",
            sortable: true,
            formatter: function (value, row) {
              let href = `${urlPrefix}attack/attack-${row.attack_version}/domain-${row.domain}/${value}/`;
              return `<a href=${href} id="attack-object-id"> ${value} </a>`;
            },
          },
          {
            field: "attack_object_name",
            title: "ATT&CK Name",
            sortable: true,
            formatter: function (value, row) {
              let href = `${urlPrefix}attack/attack-${row.attack_version}/domain-${row.domain}/${value}/`;
              return `<a href=${href} id="attack-object-id"> ${value} </a>`;
            },
          },
          {
            field: "mapping_type",
            title: "Mapping Type",
            sortable: true,
          },
          {
            field: "capability_id",
            title: "Capability ID",
            sortable: true,
            formatter: function (value, row) {
              let capabilityId = row.capability_id.replace(" ", "%20");
              let href = `${urlPrefix}attack/${row.mapping_framework_id}/attack-${row.attack_version}/${row.mapping_framework_id}-${row.mapping_framework_version}/${row.capability_id}/`;
              return `<a href=${href} id="attack-object-id"> ${value} </a>`;
            },
          },
          {
            field: "capability_description",
            title: "Capability Description",
            sortable: true,
            formatter: function (value, row) {
              let href = `${urlPrefix}attack/${row.mapping_framework_id}/attack-${row.attack_version}/${row.mapping_framework_id}-${row.mapping_framework_version}/${row.capability_id}/`;
              return `<a href=${href} id="attack-object-id"> ${value} </a>`;
            },
          },
        ];
      },
    },
    mounted() {
      this.searchMain();
    },
  };

  const app = new Vue({
    el: "#search",
    components: {
      Search: Search,
    },
  });
</script>
<style></style>
{% endblock content %}
