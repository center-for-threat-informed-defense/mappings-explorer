{% extends "base.html.j2" %} {% block content %}
<div id="matrix-component">
  <Matrix :url_prefix="'{{url_prefix}}'" :all_attack_versions="{{all_attack_versions}}"
    :all_attack_domains="{{attack_domains}}"
    :attack_domain_versions_with_mappings="{{attack_domain_versions_with_mappings}}"></Matrix>
</div>

<script>
  const Matrix = {
    template: `
      <section id="header-container" class="header-container">
        <div class="container" data-aos="fade-up">
          {% include "_breadcrumbs.html.j2" %}
          <div class="row justify-content-left">
            <div class="col-lg-8 col-md-10 col-sm-12">
              <h1> <span class="highlight">ATT&CK</span> MATRIX</h1>
              <p>[[description]]</p>
            </div>
            <div
              class="download-artifacts col-lg-4 col-md-2 col-sm-12 ml-20 text-end"
              v-if="attack_domain_versions_with_mappings[selectedDomain].includes(selectedAttackVersion)"
            >
              <h6>Download Mapping Artifacts:</h6>
              <div class="downloads">
                <p>
                  <a @click="downloadJson(
                    url_prefix + 'static/matrices/' + selectedDomain.toLowerCase() + '/' + selectedAttackVersion + '/' + selectedDomain.toLowerCase() + '-' + selectedAttackVersion + '_navigator_layer.json',
                    selectedDomain.toLowerCase() + '-' + selectedAttackVersion + '_navigator_layer.json'
                  )">
                    <span><img src="{{url_prefix}}static/img/download.svg" alt="download" style="height: 20px;"/></span>
                    Navigator Layers
                  </a>
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>
      <div class="matrix-component" id="matrix">
        <div class="container" data-aos="fade-up">
          <div class="row justify-content-left">
            <form class="col-12 version-select">
              <h2>CHOOSE YOUR VERSIONS</h2>
              <div class="row col-12" style="display: flex;">
                <div class="col-md-2 col-sm-4 form-group" @focusout="handleOutsideClick" tabindex="-1">
                  <p>ATT&CK Version</p>
                  <div class="form-control select" @click="attackSelectOpen = !attackSelectOpen">
                    <span class="selected-item">[[ selectedAttackVersion ]]</span>
                  </div>
                  <div v-if="attackSelectOpen" class="dropdown-items">
                    <div
                      :class="{
                        'dropdown-item': true,
                        'invalid-option': !attack_domain_versions_with_mappings[selectedDomain].includes(attackVersion),
                        'selected-option': selectedAttackVersion === attackVersion
                      }"
                      v-for="attackVersion in attackVersions"
                      :key="attackVersion"
                      @click="selectedAttackVersion = attackVersion; getAttackObjectDict(); attackSelectOpen = false;"
                    >
                      <span class="dropdown-item-text">[[ attackVersion ]]</span>
                    </div>
                  </div>
                </div>
                <div class="col-md-2 col-sm-4 form-group" @focusout="handleOutsideClick" tabindex="-1">
                  <p>ATT&CK Domain</p>
                  <div class="form-control select" @click="domainSelectOpen = !domainSelectOpen">
                    <span class="selected-item">[[ selectedDomain ]]</span>
                  </div>
                  <div v-if="domainSelectOpen" class="dropdown-items">
                    <div
                      :class="{
                        'dropdown-item': true,
                        'invalid-option': !attack_domain_versions_with_mappings[domain].includes(selectedAttackVersion),
                        'selected-option': selectedDomain === domain
                      }"
                      v-for="domain in attackDomains"
                      :key="domain"
                      @click="selectedDomain = domain; getAttackObjectDict(); domainSelectOpen = false;"
                    >
                      <span class="dropdown-item-text">[[ domain ]]</span>
                    </div>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>

        <section id="matrix-table">
          <div class="container" data-aos="fade-up">
            <div class="row justify-content-left">
              <div class="col-12">
                <h2>ATT&CK v[[selectedAttackVersion]] [[selectedDomain.toUpperCase()]] MATRIX</h2>
                <div class="matrix-table-container">
                  <div class="row">
                    <div class="col-md-12" style="display: flex">
                      <button @click="toggleAllTechniques(true)" class="toggle-subtechniques-btn">Show All Sub-Techniques</button>
                      <button @click="toggleAllTechniques(false)" class="toggle-subtechniques-btn">Hide All Sub-Techniques</button>
                    </div>
                  </div>
                  <div class="matrix-table-container-relative">
                    <div class="scroll-indicator-left" v-if="!scrolledCompletelyToLeft"></div>
                    <div class="overflow-scroll" id="matrix-table-scrollable" @scroll="handleScroll">
                      <div class="row tactic-row row--no-x-margin row--no-padding flex-nowrap">
                        <div v-for="tactic in tactics" class="col-md-1 col-sm-4 col--less-x-padding tactic-box">
                          <div class="tactic-header">
                            <a :href="url_prefix + 'attack/attack-' + selectedAttackVersion + '/domain-' + selectedDomain.toLowerCase() + '/tactics/' + tactic.id + '/'"  class="tactic-name">[[  tactic.name ]]</a>
                            <br/>
                            ([[ tactic.id ]])
                          </div>
                        </div>
                      </div>
                      <div class="row row--no-x-margin row--no-padding flex-nowrap">
                        <div class="col-md-1 col-sm-4 col--less-x-padding" v-for="tactic in tactics">
                          <div class="row row--no-x-margin row--no-padding" v-for="technique in tactic.techniques">
                            <div class="row row--no-x-margin row--no-padding">
                              <div
                                :class="{
                                  'col-2 align-items-center col--less-x-padding d-flex': true,
                                  'subtechnique-toggle-col' : technique.subtechniques.length,
                                  'subtechnique-toggle-col--no-icon': !technique.subtechniques.length
                                }"
                              >
                                <img
                                  v-if="technique.subtechniques.length && !technique.open"
                                  @click="handleClick(technique)"
                                  class="icon"
                                  src="{{url_prefix}}static/img/chevron-right.svg"
                                  alt=""
                                />
                                <img
                                  v-else-if="technique.subtechniques.length && technique.open"
                                  @click="handleClick(technique)"
                                  class="icon"
                                  src="{{url_prefix}}static/img/chevron-down.svg"
                                  alt=""
                                />
                              </div>
                              <div
                                class="col-10 col--no-x-padding"
                                @mouseenter="techniqueHovered = technique"
                                @mouseleave="techniqueHovered = ''"
                                :id="technique.id + '_' + technique.parent + '_box'"
                              >
                                <div
                                  class="technique-box"
                                  :style="technique.background_color ? { 'backgroundColor': technique.background_color} : ''"
                                >
                                  <a
                                    v-if="technique.score > 0"
                                    :href="url_prefix + 'attack/attack-' + selectedAttackVersion + '/domain-' + selectedDomain.toLowerCase() + '/techniques/' + technique.id"
                                    @mouseenter="techniqueHovered = technique"
                                  >
                                    [[  technique.name  ]]
                                  </a>
                                  <span v-else>[[ technique.name ]]</span>
                                  <br/>
                                  ( [[ technique.id ]] )
                                  <span class="technique-score" v-if="technique.subtechniques.length">
                                    ([[ technique.subtechniques.length ]])
                                  </span>
                                </div>
                              </div>
                            </div>
                            <div class="row row--no-x-margin row--no-padding">
                              <div class="col-2 col--no-x-padding subtechniques-col">
                                <svg fill="grey" v-if="technique.open && technique.subtechniques.length" width="12px" height="20px"><path d="M0 0H12V12Z"/></svg>
                              </div>
                              <div
                                class="col-10
                                col--no-x-padding"
                              >
                                <div
                                  v-if="technique.open"
                                  v-for="subtechnique in technique.subtechniques"
                                  @mouseenter="techniqueHovered = subtechnique"
                                  @mouseleave="techniqueHovered = ''"
                                  :id="subtechnique.id + '_'+ subtechnique.parent + '_box'"
                                >
                                  <div class="subtechnique-box" :style="subtechnique.background_color ? { 'backgroundColor': subtechnique.background_color} : ''">
                                    <a v-if="subtechnique.score >0" :href="url_prefix + '/attack/attack-' + selectedAttackVersion + '/domain-' + selectedDomain + '/' + subtechnique.id" @mouseenter="techniqueHovered = subtechnique">[[ subtechnique.name ]]</a>
                                    <span v-else>[[ subtechnique.name ]]</span>
                                    <br/>
                                    ( [[ subtechnique.id ]] )
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="scroll-indicator-right" v-if="!scrolledCompletelyToRight"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        <div
          v-if="techniqueHovered && techniqueHovered.score > 0"
          class="technique-tooltip align-self-center align-content-start"
          :style="getTooltipPosition()"
        >
          <span><b>[[ techniqueHovered.id ]]</b></span>
          [[ " " + techniqueHovered.name ]]
          <hr class="header-row"/>
          <span>Mapped To:</span>
          <br/>
          <ul class="mapped-capability-list">
            <li v-for="mappedCapability in techniqueHovered.mapped_capabilities">
              [[ mappedCapability ]]
            </li>
          </ul>
        </div>
      </div>
  `,
    delimiters: ["[[", "]]"],
    data() {
      return {
        tactics: [],
        selectedTechnique: {},
        selectedAttackVersion: "10.1",
        attackObjectDict: {},
        techniqueHovered: "",
        selectedDomain: "Enterprise",
        scrolledCompletelyToRight: false,
        scrolledCompletelyToLeft: true,
        attackSelectOpen: false,
        domainSelectOpen: false,
        description: ""
      };
    },
    props: {
      url_prefix: String,
      all_attack_versions: Array,
      all_attack_domains: Object,
      attack_domain_versions_with_mappings: Object
    },
    computed: {
      attackDomains() {
        if (this.all_attack_domains) {
          return Object.keys(this.all_attack_domains).filter((domain) => {
            return this.all_attack_domains[domain].includes(
              this.selectedAttackVersion
            );
          });
        }
        return [];
      },
      attackVersions() {
        if (this.all_attack_versions) {
          return this.all_attack_domains[this.selectedDomain];
        }
      },
    },
    methods: {
      downloadJson(file, filename){
        console.log(file)
        console.log(filename)
        fetch(file)
          .then((response) => response.json())
          .then((json) => {
            json = JSON.stringify(json);
            let blob = new Blob([json], {
              type: 'application/json'
            });
            let link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = filename;
            link.click();
          });
      },
      handleScroll(e) {
        const { offsetWidth, scrollWidth } = e.target;
        let scrollableElement = document.getElementById("matrix-table-scrollable");
        let scrollLeft = scrollableElement.scrollLeft;
        let scrollRight = scrollableElement.scrollRight;
        this.scrolledCompletelyToRight = (scrollLeft + offsetWidth) > (scrollWidth - 1);
        this.scrolledCompletelyToLeft = scrollLeft === 0;
      },
      getTooltipPosition() {
        let hoveredElement = document
          .getElementById(
            `${this.techniqueHovered.id}_${this.techniqueHovered.parent}_box`
          )
          ?.getBoundingClientRect();
        let xPosition = window.scrollX + hoveredElement?.x;
        let yPosition = window.scrollY + hoveredElement?.y;
        return `top:${yPosition}px;left:${xPosition - 65}px;`;
      },
      getAttackObjectDict() {
        attack_object_file = `${this.url_prefix
          }static/matrices/${this.selectedDomain.toLowerCase()}/${this.selectedAttackVersion
          }/${this.selectedDomain.toLowerCase()}-${this.selectedAttackVersion
          }_matrix_data.json`;
        fetch(attack_object_file)
          .then((response) => response.json())
          .then((json) => {
            this.attackObjectDict = json;
            this.getTactics();
            this.getDescription();
          });
      },
      getDescription() {
       attack_object_file = `${this.url_prefix
          }data/attack/${this.selectedDomain.toLowerCase()}-attack-${this.selectedAttackVersion
          }.json`;
        fetch(attack_object_file)
          .then((response) => response.json())
          .then((json) => {
            objects = json["objects"]
            let d = Object.values(objects).filter((value) => {
              return value.type === "x-mitre-collection";
            });
            this.description = d[0].description
          })
        },
      getTactics() {
        let tactics = Object.values(this.attackObjectDict).filter((value) => {
          return value.type === "tactic";
        });
        tactics = tactics.map((tactic) => {
          tactic.techniques = Object.values(this.attackObjectDict).filter(
            (value) => {
              return (
                value.type === "technique" &&
                value.tactics.includes(tactic.short_name)
              );
            }
          );
          tactic.techniques = tactic.techniques.map((technique) => {
            technique.open = false;
            technique.parent = tactic.id;
            technique.subtechniques = Object.values(
              this.attackObjectDict
            ).filter((value) => {
              return (
                value.type === "subtechnique" &&
                value.technique === technique.id
              );
            });
            technique.subtechniques = technique.subtechniques.map((subtechnique) => {
              subtechnique.parent = technique.parent;
              return { ...subtechnique };
            });
            return { ...technique };
          });
          return { ...tactic };
        });
        this.tactics = tactics;
      },
      handleClick(technique) {
        technique.open = !technique.open;
      },
      toggleAllTechniques(open) {
        this.tactics.forEach((tactic) =>
          tactic.techniques.forEach((technique) => {
            technique.open = open;
          })
        );
      },
      setVersionsAccoringToQueryParams() {
        const url = new URL(window.location.href)
        if (url.searchParams.has('attack-version') && this.attackVersions.includes(url.searchParams.get('attack-version'))) {
          this.selectedAttackVersion = url.searchParams.get('attack-version');
        }
        else {
          let newurl = `${window.location.origin}${window.location.pathname}?attack-version=${this.selectedAttackVersion}&domain=${this.selectedDomain.toLowerCase()}`
          window.history.pushState({ path: newurl }, '', newurl);
        }
        if (url.searchParams.has('domain') && this.attackDomains.includes(url.searchParams.get('domain').toLowerCase())) {
          this.selectedDomain = this.attackDomains.find(domain => domain.toLowerCase() === url.searchParams.get('domain').toLowerCase());
        }
        else {
          let newurl = `${window.location.origin}${window.location.pathname}?attack-version=${this.selectedAttackVersion}&domain=${this.selectedDomain.toLowerCase()}`
          window.history.pushState({ path: newurl }, '', newurl);
        }
      },
      handleOutsideClick() {
        this.attackSelectOpen = false;
        this.domainSelectOpen = false;
      }
    },
    watch: {
      selectedAttackVersion: {
        handler(newValue) {
          let newurl = `${window.location.origin}${window.location.pathname}?attack-version=${this.selectedAttackVersion}&domain=${this.selectedDomain.toLowerCase()}`
          window.history.pushState({ path: newurl }, '', newurl);
        },
      },
      selectedDomain: {
        handler(newValue) {
          let newurl = `${window.location.origin}${window.location.pathname}?attack-version=${this.selectedAttackVersion}&domain=${this.selectedDomain.toLowerCase()}`
          window.history.pushState({ path: newurl }, '', newurl);
        },
      },
    },
    mounted() {
      this.getAttackObjectDict();
      this.setVersionsAccoringToQueryParams();
    },
  };

  Vue.createApp({
    components: {
      Matrix
    }
  }).mount("#matrix-component");

</script>


{% endblock content %}
