{
    "metadata": {
        "mapping_version": "1.0.0",
        "technology_domain": "enterprise",
        "attack_version": "15.1",
        "mapping_framework": "intel-vpro",
        "mapping_framework_version": "08/20/2024",
        "author": null,
        "contact": null,
        "organization": null,
        "creation_date": "08/20/2024",
        "last_update": "12/20/2024",
        "mapping_types": {
            "crowdstrike-heed": {
                "name": "Crowdstrike HEED",
                "description": ""
            },
            "win11-pde": {
                "name": "Win 11, PDE",
                "description": ""
            },
            "win11-bl": {
                "name": "Win 11, BitLocker",
                "description": ""
            },
            "win11-sb": {
                "name": "Win 11, Secure Boot",
                "description": ""
            },
            "win11-sg": {
                "name": "Win 11, System Guard",
                "description": ""
            },
            "win11-cg": {
                "name": "Win 11, Credential Guard",
                "description": ""
            },
            "win11-hwesp": {
                "name": "Win 11, HWESP",
                "description": ""
            },
            "win11-vbs-mi": {
                "name": "Win 11, VBS, Memory Integrity",
                "description": ""
            },
            "crwd-ams": {
                "name": "CrowdStrike AMS",
                "description": ""
            },
            "win11-def": {
                "name": "Microsoft Defender",
                "description": ""
            },
            "win11-ess-hello": {
                "name": "Win 11, ESS/Hello",
                "description": ""
            },
            "win11-kdp": {
                "name": "Win 11, KDP",
                "description": ""
            }
        },
        "capability_groups": {
            "advanced_threat_protection": "Hardware - Advanced Threat Protection",
            "trusted_computing": "Hardware - Trusted Computing",
            "encryption": "Hardware - Encryption and Data Protection",
            "virtualization": "Hardware - Virtualization"
        }
    },
    "mapping_objects": [
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE. \n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN.\n\nTo defend against malicious reset attacks, BitLocker uses the TCG Reset Attack Mitigation, also known as MOR bit (Memory Overwrite Request), before extracting keys into memory.\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE. \n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN.\n\nTo defend against malicious reset attacks, BitLocker uses the TCG Reset Attack Mitigation, also known as MOR bit (Memory Overwrite Request), before extracting keys into memory.\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1565.001",
            "attack_object_name": "Stored Data Manipulation",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1565",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                " https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                " https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1552",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1552.002",
            "attack_object_name": "Credentials in Registry",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1552",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1542.003",
            "attack_object_name": "Bootkit",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1542",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1025",
            "attack_object_name": "Data from Removable Media",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nBitLocker provides encryption for the OS, fixed data, and removable data drives (BitLocker To Go), leveraging technologies like UEFI Secure Boot (Intel BootGuard), and TPM (Intel PTT).\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1025",
            "attack_object_name": "Data from Removable Media",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nBitLocker provides encryption for the OS, fixed data, and removable data drives (BitLocker To Go), leveraging technologies like UEFI Secure Boot (Intel BootGuard), and TPM (Intel PTT).\n\nWindows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data. Bitlocker features are used to then encrypt or decrypt that data utilizing those keys.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-bl",
            "attack_object_id": "T1552.004",
            "attack_object_name": "Private Keys",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1552",
            "comments": "BitLocker uses TPM (Intel PTT) to bind the volume encryption keys for full disk encryption (FDE), Intel AES-NI to accelerate the encryption/decryption process, and Intel BootGuard to ensure operating system components are not compromised during boot. BitLocker also can add pre-boot authentication (like PIN) to access the decryption keys used for FDE.\n\nBitLocker relies on Intel BootGuard and the TPM (Intel PTT) to ensure none of the boot components or the OS components are tampered with before releasing the BitLocker key.\n\nBitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices. BitLocker also uses Intel PTT to check integrity of early boot components, configuration data as well as OS components preventing attacks that perform modifications of those components.\n\nData on the encrypted volume can't be accessed without entering the PIN if configured. TPMs (Intel PTT) also have anti-hammering protection that is designed to prevent brute force attacks that attempt to determine the PIN. BitLocker can protect against manipulation of stored data on the drive until it is unlocked.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-encryption-standard-instructions-aes-ni.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1552",
            "comments": "Windows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-aes-ni",
            "capability_description": "Intel Advanced Encryption Standard - New Instructions",
            "mapping_type": "win11-pde",
            "attack_object_id": "T1074.001",
            "attack_object_name": "Local Data Staging",
            "capability_group": "encryption",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1074",
            "comments": "Windows 11 Personal Data Encryption (PDE) uses Intel PTT (TPM), Intel AES-NI, Intel BootGuard to ensure operating system components are not compromised until the Windows Sign-in screen at which point Windows Hello for Business is used in conjunction with Microsoft Entra to authenticate the user and open the container with the encryption keys used to secure the user's personal data.\n\nPDE is meant to work alongside BitLocker. PDE isn't a replacement for BitLocker, nor is BitLocker a replacement for PDE. Using both features together provides better security than using either BitLocker or PDE alone. PDE differs from BitLocker in that it encrypts files instead of whole volumes and disks. PDE occurs in addition to other encryption methods such as BitLocker. Unlike BitLocker that releases data encryption keys at boot, PDE doesn't release data encryption keys until a user signs in using Windows Hello for Business.\n\nPDE refers to a new user authenticated encryption mechanism used to protect user content. Windows Hello for Business is the modern user authentication mechanism which is used with PDE. Windows Hello for Business, either with PIN or biometrics (face or fingerprint), is used to protect the container which houses the encryption keys used by PDE. When the user logs in (either after bootup or unlocking after a lock screen), the container gets authenticated to release the keys in the container to decrypt user content.\n\nPDE provides real-time protection against adversaries exfiltrating data at rest in removable media. In some cases, data is protected at rest until the user logs in, and is marked partial for such cases.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/countermeasures",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-05/intel-win11-solution-brief-book.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1036.001",
            "attack_object_name": "Invalid Code Signature",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1036",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "minimal",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1027.004",
            "attack_object_name": "Compile After Delivery",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1601.001",
            "attack_object_name": "Patch System Image",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1601",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "minimal",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1553.006",
            "attack_object_name": "Code Signing Policy Modification",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1553",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1195.003",
            "attack_object_name": "Compromise Hardware Supply Chain",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1195",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1542",
            "attack_object_name": "Pre-OS Boot",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.\n\nSystem Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1542.001",
            "attack_object_name": "System Firmware",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1542",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.\n\nSystem Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process#measured-boot",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1542.002",
            "attack_object_name": "Component Firmware",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1542",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.\n\nSystem Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process#measured-boot",
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1542.003",
            "attack_object_name": "Bootkit",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1542",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.\n\nSystem Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://%20https//www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-sb",
            "attack_object_id": "T1495",
            "attack_object_name": "Firmware Corruption",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Secure Boot leverages Intel PTT (TPM) to safeguard settings stored in UEFI, while Intel Boot Guard prevents unauthorized modifications to UEFI firmware. It verifies the signatures of the UEFI firmware, bootloader, and boot drivers before loading the operating system.\n\nWhen the PC starts, the firmware checks the signature of each piece of boot software, including Unified Extensible Firmware Interface (UEFI) firmware drivers (also known as Option ROMs), Extensible Firmware Interface (EFI) applications, and the operating system. If the signatures are valid, the PC boots, and the firmware gives control to the operating system. Rollback protection also prevents the system from rolling back to older versions of firmware.\n\nSecure Boot employs Intel PTT (TPM) to thwart attacks that attempt to alter the signature policy at the boot level in real-time or modify components involved in the boot process before the boot process. Intel Boot Guard ensures the integrity of the boot-level code before it is executed on the processor, preventing the system from proceeding with malicious boot code.\n\nSecure Boot is able to address threats pre-os that change the signature of the loaded boot component.\n\nSystem Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/operating-system-security/system-security/secure-the-windows-10-boot-process",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-txt",
            "capability_description": "Intel Trusted Execution Technology",
            "mapping_type": "win11-sg",
            "attack_object_id": "T1195",
            "attack_object_name": "Supply Chain Compromise",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "System Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                " https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-txt",
            "capability_description": "Intel Trusted Execution Technology",
            "mapping_type": "win11-sg",
            "attack_object_id": "T1195.003",
            "attack_object_name": "Compromise Hardware Supply Chain",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1195",
            "comments": "System Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                " https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-txt",
            "capability_description": "Intel Trusted Execution Technology",
            "mapping_type": "win11-sg",
            "attack_object_id": "T1195.002",
            "attack_object_name": "Compromise Software Supply Chain",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1195",
            "comments": "System Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                " https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-txt",
            "capability_description": "Intel Trusted Execution Technology",
            "mapping_type": "win11-sg",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "System Guard Secure Launch uses a technology called Dynamic Root of Trust Measurement (DRTM). It leverages Intel PTT (TPM) and TXT to provide secure methods to boot a system and verify the integrity of the operating system and loading mechanisms. System Guard Secure Launch ensures that the system can freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early code to boot the system but then being able to securely transition into a trusted and measured state. The ability to transition in real-time to a secure state justified the score of significant for this feature and its corresponding protection (E.g., bootkit, rootkit, firmware corruption, etc.).",
            "references": [
                "https://www.microsoft.com/en-us/security/blog/2020/03/17/secured-core-pcs-a-brief-showcase-of-chip-to-cloud-security-against-kernel-attacks/?msockid=07bc2745a94165f41593324ba8c664ab",
                "https://www.intel.com/content/www/us/en/developer/articles/tool/intel-trusted-execution-technology.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/how-hardware-based-root-of-trust-helps-protect-windows",
                "https://www.microsoft.com/content/dam/microsoft/final/en-us/microsoft-brand/documents/MSFT-Windows11-Security-book_Sept2023.pdf?msockid=13b4f945a67b6ac00039eda4a7a26b00"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\r\n\r\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\r\n\r\nThis is marked as partial since it uses VBS to isolate LSA related processes and provides some protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\r\n\r\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\r\n\r\nThis is marked as significant since it uses VBS to isolate LSA related processes and provide real-time protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/shows/windowsserver/credential-guard-remote-guard-in-windows-server-2016",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1550.003",
            "attack_object_name": "Pass the Ticket",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1550",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as significant since it uses VBS to isolate LSA related processes and provide real-time protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/shows/windowsserver/credential-guard-remote-guard-in-windows-server-2016",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1550.002",
            "attack_object_name": "Pass the Hash",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1550",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as significant since it uses VBS to isolate LSA related processes and provide real-time protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/shows/windowsserver/credential-guard-remote-guard-in-windows-server-2016",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1110",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as partial since it uses VBS to isolate LSA related processes and provides some protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\r\n\r\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\r\n\r\nThis is marked as significant since it uses VBS to isolate LSA related processes and provide real-time protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                " https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1547",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as partial since it does not prevent an illegitimate LSASS driver from running.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1003",
            "attack_object_name": "OS Credential Dumping",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as significant since it uses VBS to isolate LSA related processes and provide real-time protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1589",
            "attack_object_name": "Gather Victim Identity Information",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\r\n\r\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\r\n\r\nThis is marked as partial since it uses VBS to isolate LSA related processes and provides some protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-cg",
            "attack_object_id": "T1589.001",
            "attack_object_name": "Credentials",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1589",
            "comments": "Credential Guard uses Intel VT-x for providing Virtualization-based security (VBS), to isolate secrets so that only privileged system software can access them. It isolates LSA-related processes and provides real-time protection against in-memory credential-stealing attempts. NTLM, Kerberos, and Credential Manager take advantage of platform security features, including Secure Boot (Intel PTT and Intel Boot Guard) and virtualization, to protect credentials.\n\nCredential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications such as domain credentials. However, it does not protect against all forms of credential dumping, such as registry dumping. Credential Guard benefits from enabling Secure Boot (BootGuard) and UEFI Lock. When Secure Boot is enabled, a secure and verified environment is established from the start of the boot process. With UEFI Lock, Credential Guard settings are stored in UEFI firmware, significantly increasing the difficulty of disabling Credential Guard through registry changes.\n\nThis is marked as partial since it uses VBS to isolate LSA related processes and provides some protection against in-memory credential stealing attempts.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/considerations-known-issues",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#lsa-and-credential-guard",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/credential-guard/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055",
            "attack_object_name": "Process Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055.001",
            "attack_object_name": "Dynamic-link Library Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1055.001",
            "attack_object_name": "Dynamic-link Library Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055.002",
            "attack_object_name": "Portable Executable Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1055.002",
            "attack_object_name": "Portable Executable Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055.003",
            "attack_object_name": "Thread Execution Hijacking",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1055.003",
            "attack_object_name": "Thread Execution Hijacking",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055.011",
            "attack_object_name": "Extra Window Memory Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1055.011",
            "attack_object_name": "Extra Window Memory Injection",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1055.012",
            "attack_object_name": "Process Hollowing",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1055",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                " https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1036.001",
            "attack_object_name": "Invalid Code Signature",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1036",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1553",
            "attack_object_name": "Subvert Trust Controls",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1553.003",
            "attack_object_name": "SIP and Trust Provider Hijacking",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1553",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1553.006",
            "attack_object_name": "Code Signing Policy Modification",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1553",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1553.006",
            "attack_object_name": "Code Signing Policy Modification",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1553",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1547.002",
            "attack_object_name": "Authentication Package",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1547",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1547.005",
            "attack_object_name": "Security Support Provider",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1547",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1547",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1547",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1106",
            "attack_object_name": "Native API",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1014",
            "attack_object_name": "Rootkit",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nWindows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-vbs-mi",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1574",
            "attack_object_name": "Hijack Execution Flow",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Memory integrity is a Virtualization-based security feature that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS (VBS uses Intel VT-x). Memory integrity also restricts kernel memory allocations that could be used to compromise the system. Memory integrity is sometimes referred to as hypervisor-protected code integrity (HVCI). VBS provides an isolated environment that acts as a root-of-trust for the OS and its core components. It is enabled by Intel VT-x, VT-x2 with Extended Page Tables, SMMUs (Intel VT-d) and Secure Boot (Intel Boot Guard).\n\nMemory Integrity protects against behaviors that involve exploitation of kernel components including core drivers in memory, changing security configurations and running untrusted code (based on signatures).\n\n\"HVCI protects modification of the Control Flow Guard (CFG) bitmap for kernel mode drivers. Protects the kernel mode code integrity process that ensures that other trusted kernel processes have a valid certificate.\"\n\n\"Hypervisor-protected code integrity introduces a new rule that no kernel memory pages are both writeable and executable, which eliminates an entire category of attacks that dynamically generate code. Additionally, HVCI comes enabled with a code integrity security policy that blocks drivers known to be used in kernel tampering, including Mimikatz, the old vulnerable VBox driver, and the Capcom driver commonly used in rootkits. Ultimately, HVCI provides optimal protection for the kernel against tampering and escalation of privilege attacks. ... With HVCI enabled, attempts to modify the process structures will fail, preventing the protected process flag from being removed, which prevents process memory inspection or module injection into LSA.\"\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://techcommunity.microsoft.com/blog/windows-itpro-blog/comprehensive-protection-for-your-credentials-with-credential-guard-and-hvci/765314",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/device-guard-and-credential-guard"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1547.004",
            "attack_object_name": "Winlogon Helper DLL",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1547",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1548",
            "attack_object_name": "Abuse Elevation Control Mechanism",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "HW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1611",
            "attack_object_name": "Escape to Host",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.",
            "references": [
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.",
            "references": [
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1543",
            "attack_object_name": "Create or Modify System Process",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1543",
            "attack_object_name": "Create or Modify System Process",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1543.003",
            "attack_object_name": "Windows Service",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1543",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1543.003",
            "attack_object_name": "Windows Service",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1543",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-hwesp",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1547",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1547.008",
            "attack_object_name": "LSASS Driver",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1547",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\nHW Enforced stack protection (HWESP) relies on Virtualization Based Security (VBS) which use Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to ensure the OS components loaded are not tampered with and isolate security sensitive processes. Additionally, it uses Intel Control Flow Enforcement Technology (Intel CET) to allow hardware to ensure that sensitive areas in the regions of memory (such as the stack) for processes are not tampered with by either injecting code or changing the control flow of the code or both.\n\nHWESP includes four components Code Integrity Guard, Arbitrary Code Guard, Control Flow Guard and Shadow Stack protections.\n\nCode Integrity Guard attempts to prevent \"... arbitrary code generation by enforcing signature requirements for loading binaries\".\n\nArbitrary Code Guard attempts to ensure \"... signed pages are immutable and dynamic code cannot be generated ...\".\n\nControl Flow Guard ensures control flow integrity by enforcing \"... integrity on indirect calls (forward-edge CFI).\"\n\nShadow Stack ensures control flow integrity by enforcing \"...  integrity on return addresses on the stack (backward-edge CFI).\"\n\nTogether these features aim to ensure integrity of binary images run on Windows 11 and prevent dynamic code from running or changing the control flow of the code. Since these features offer real-time protection for sensitive regions of memory, these are marked as offering significant protection.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/understanding-hardware-enforced-stack-protection/ba-p/1247815",
                "https://techcommunity.microsoft.com/t5/windows-os-platform-blog/developer-guidance-for-hardware-enforced-stack-protection/ba-p/2163340",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-vt",
            "capability_description": "Intel Virtualization Technology",
            "mapping_type": "win11-kdp",
            "attack_object_id": "T1547.010",
            "attack_object_name": "Port Monitors",
            "capability_group": "virtualization",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1547",
            "comments": "Windows Kernel Data Protection uses VBS (Intel PTT, Intel VT-x, Intel VT-d, Intel VT-rp, and Intel BootGuard) to protect kernel data, kernel data structures, and OS drivers from tampering attacks.\n\nWith KDP, software running in kernel-mode can protect read-only memory statically (a section of its own image) or dynamically (pool memory that can be initialized only once). KDP only establishes write protections in VTL1 for the GPAs backing a protected memory region using the SLAT page tables for the hypervisor to enforce. This way, no software running in the NT kernel (VTL0) can have the permissions needed to change the memory. The goal of using KDP is to protect internal policy state after it has been initialized (i.e., read from the registry or generated at boot time). These data structures are critical to protect as if they are tampered with a driver that is properly signed but vulnerable could attack the policy data structures and then install an unsigned driver on the system. With KDP, this attack is mitigated by ensuring the policy data structures cannot be tampered with. The score of significant highlights this real-time protection of the kernel data, data structures, and drivers from tampering attacks.\n\nThe Vulnerable Driver Blocklist uses Virtualization Based Security (VBS) Memory Integrity feature or HVCI, which in turn rely on Intel PTT, Intel VT-x, Intel VT-d and Intel BootGuard to create an isolated virtual environment for the kernel such that attacks from vulnerable drivers are prevented. It uses a deny list approach along with code signing checks to ensure vulnerable drivers are not modified and to prevent attacks against them.\n\n\"... the vulnerable driver blocklist is also enforced when either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode is active.\"\n\n\"The blocklist is updated with each new major release of Windows, typically 1-2 times per year...\"\n\n\"Memory integrity and virtualization-based security (VBS) improve the threat model of Windows and provide stronger protections against malware trying to exploit the Windows kernel. VBS uses the Windows hypervisor to create an isolated virtual environment that becomes the root of trust of the OS that assumes the kernel can be compromised. Memory integrity is a critical component that protects and hardens Windows by running kernel mode code integrity within the isolated virtual environment of VBS.\"",
            "references": [
                "https://techcommunity.microsoft.com/blog/microsoftsecurityexperts/strategies-to-monitor-and-prevent-vulnerable-driver-attacks/4103985",
                "https://learn.microsoft.com/en-us/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules",
                "https://support.microsoft.com/en-us/topic/kb5020779-the-vulnerable-driver-blocklist-after-the-october-2022-preview-release-3fcbe13a-6013-4118-b584-fcfbc6a09936",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.fortinet.com/blog/threat-research/driver-signature-enforcement-tampering",
                "https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1210",
            "attack_object_name": "Exploitation of Remote Services",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide a higher level of visibility into complex attack techniques. By utilizing CPU telemetry, HEED enhances the real-time detection and analysis of sophisticated exploitation methods, particularly those involving coded injection attacks. These attacks often target software vulnerabilities in remote services, enabling adversaries to gain unauthorized access to internal systems.\n\nIntel PT offers deep insights into program execution at the hardware level, allowing for the real-time tracking of control flow and memory accesses. This detailed telemetry stream enables security professionals to identify patterns indicative of exploit attempts, such as abnormal execution paths or suspicious API calls. \n\nBy combining Intel PT’s granular data with advanced detection algorithms, HEED offers proactive defense against evasive malicious activities that can bypass traditional security mechanisms.",
            "references": [
                "https://www.crowdstrike.com/en-us/blog/addressing-threat-landscape-with-intel-and-ai/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1212",
            "attack_object_name": "Exploitation for Credential Access",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide a higher level of visibility into complex attack techniques, such as the real-time detection of software vulnerabilities targeting credential access. These exploits often involve attackers manipulating flaws in software, services, or the operating system itself to execute malicious code and gain unauthorized access to user credentials or system-level privileges. \n\nThis significant capability enables security teams to spot abnormal behavior such as suspicious API calls, unexpected code paths, or attempts to extract sensitive information. With Intel PT’s telemetry stream, HEED makes it easier to detect exploitation techniques typically used in credential theft.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED offers enhanced protection against evasive attacks that might bypass traditional security defenses. It enables organizations to proactively identify and mitigate credential access exploits, ensuring stronger protection for sensitive data and internal systems against evolving cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1211",
            "attack_object_name": "Exploitation for Defense Evasion",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide a higher level of visibility into complex attack techniques, such as the real-time detection of system or application vulnerabilities attempting to bypass security features. These exploits often involve attackers manipulating flaws in software, services, or the operating system itself to execute malicious code and Adversaries may exploit a system or application vulnerability to bypass security features by leveraging programming errors in an application or the Windows 11 operating system software to execute adversary-controlled code. \n\nWith Intel PT’s telemetry stream, HEED makes it easier to detect exploitation techniques typically used in defense evasion. By combining Intel PT’s granular telemetry with advanced detection algorithms, HEED offers enhanced protection against evasive attacks that might bypass traditional security defenses. It enables organizations to proactively identify and mitigate software exploits, thus ensuring stronger protection for data and systems against evolving cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1068",
            "attack_object_name": "Exploitation for Privilege Escalation",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to enhance visibility into sophisticated attack techniques, including real-time detection of privilege escalation exploits. These exploits involve attackers manipulating software vulnerabilities in applications, services, or the operating system itself to execute malicious code and elevate their access to system-level privileges.\n\nIntel PT provides deep insights into program execution at the hardware level, capturing critical telemetry data such as control flow and memory access in real-time. This capability allows security teams to detect abnormal behavior like suspicious API calls, unexpected code paths, or attempts to gain unauthorized access to higher-level system privileges. By monitoring these low-level activities, HEED makes it easier to identify privilege escalation tactics and other attack methods that aim to compromise sensitive systems.\n\nBy combining Intel PT's detailed telemetry with advanced detection algorithms, HEED offers a powerful defense against evasive exploit techniques that may bypass traditional security measures. This proactive approach allows organizations to quickly identify and mitigate privilege escalation attempts, strengthening the protection of critical systems and internal infrastructure from evolving cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1106",
            "attack_object_name": "Native API",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including the real-time detection of exploits that abuse native APIs. These attacks often involve adversaries manipulating vulnerabilities within applications, services, or the operating system to redirect the control flow of a program and execute malicious code.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real-time. This detailed telemetry enables security teams to detect abnormal behaviors such as suspicious API calls, unexpected code paths, and attempts to hijack legitimate processes. By monitoring these low-level activities, HEED makes it easier to identify exploits that manipulate native APIs to evade detection and gain unauthorized access to systems.\n\nBy combining Intel PT's granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive attack techniques that may bypass traditional security measures. This proactive approach allows organizations to quickly identify and mitigate exploitation attempts that abuse native APIs, strengthening the protection of critical systems from evolving cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1203",
            "attack_object_name": "Exploitation for Client Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of exploits designed for client execution. These attacks often involve adversaries exploiting vulnerabilities within applications, services, or the operating system to redirect control flow and execute malicious code on client systems.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real-time. This detailed telemetry allows security teams to detect abnormal behaviors, including suspicious code paths, unexpected execution flows, and attempts to hijack legitimate processes. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts that aim to gain control of client systems and bypass traditional security measures.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive attack techniques that may evade detection by conventional security tools. This proactive approach enables organizations to quickly identify and mitigate client execution exploits, enhancing protection for critical systems and reducing the risk of compromise from evolving cyber threats",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of exploits that abuse command and scripting interpreters. These attacks often involve adversaries exploiting vulnerabilities within applications, services, or the operating system to execute malicious commands or scripts, enabling them to manipulate system behavior and compromise security.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real-time. This detailed telemetry helps security teams detect abnormal behaviors, such as suspicious script executions, unexpected command flows, and attempts to hijack legitimate processes through interpreters like PowerShell or Bash. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts that manipulate command and scripting interpreters to gain unauthorized access or escalate privileges.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive attack techniques that may bypass traditional security measures. This proactive approach enables organizations to quickly identify and mitigate exploits abusing command and scripting interpreters, strengthening the protection of critical systems and reducing the risk of compromise from advanced cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1566.001",
            "attack_object_name": "Spearphishing Attachment",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1566",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of exploits delivered via spearphishing attachments. These attacks often involve adversaries exploiting vulnerabilities within applications or services to execute malicious code once a user interacts with a compromised attachment, enabling attackers to manipulate system behavior and compromise security.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real time. This detailed telemetry helps security teams detect abnormal behaviors, such as suspicious execution flows or unexpected interactions triggered by malicious attachments, as well as attempts to hijack legitimate processes. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts that are often used in spearphishing campaigns to gain unauthorized access or deploy malware.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive spearphishing attacks that may bypass traditional security measures. This proactive approach enables organizations to quickly identify and mitigate exploits delivered through malicious attachments, strengthening the protection of critical systems and reducing the risk of compromise from advanced, targeted cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1189",
            "attack_object_name": "Drive-by Compromise",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of drive-by compromise exploits. These attacks typically involve adversaries exploiting vulnerabilities in web browsers or third-party applications to automatically execute malicious code when a user visits a compromised website, allowing attackers to manipulate system behavior and gain unauthorized access.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real time. This telemetry helps security teams detect abnormal behaviors, such as suspicious code execution flows or unexpected interactions triggered by malicious websites. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts often used in drive-by compromises to deploy malware or hijack legitimate processes.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive drive-by compromise attacks that may bypass traditional security measures. This proactive approach enables organizations to quickly identify and mitigate exploits delivered through compromised websites, strengthening the protection of critical systems and reducing the risk of compromise from advanced, targeted cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1190",
            "attack_object_name": "Exploit Public-Facing Application",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of exploits targeting public-facing applications. These attacks often involve adversaries exploiting vulnerabilities in externally accessible web applications or services to execute malicious code, allowing attackers to manipulate system behavior, gain unauthorized access, or disrupt critical infrastructure.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real time. This telemetry helps security teams detect abnormal behaviors, such as suspicious execution paths, unauthorized interactions, or attempts to hijack legitimate processes within public-facing applications. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts that target vulnerabilities in web servers, APIs, and other externally exposed services.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive attacks that exploit public-facing applications and may bypass traditional security measures. This proactive approach enables organizations to quickly identify and mitigate these attacks, strengthening the protection of critical systems and reducing the risk of compromise from advanced, targeted cyber threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-pt",
            "capability_description": "Intel Process Trace",
            "mapping_type": "crowdstrike-heed",
            "attack_object_id": "T1055",
            "attack_object_name": "Process Injection",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike Falcon Hardware Enhanced Exploit Detection (HEED) is an advanced security feature that integrates Intel Processor Trace (Intel PT) technology to provide enhanced visibility into sophisticated attack techniques, including real-time detection of process injection exploits. These attacks often involve adversaries injecting malicious code into legitimate processes to evade detection, escalate privileges, or manipulate system behavior without triggering traditional security defenses.\n\nIntel PT offers deep insights into program execution at the hardware level, capturing critical telemetry such as control flow, memory access, and instruction execution in real time. This detailed telemetry helps security teams detect abnormal behaviors, such as unauthorized code injections, suspicious execution paths, and attempts to manipulate legitimate processes. By monitoring these low-level activities, HEED makes it easier to identify exploitation attempts that use process injection techniques to compromise systems or deploy malware.\n\nBy combining Intel PT’s granular telemetry with advanced detection algorithms, HEED provides a powerful defense against evasive process injection attacks that may bypass conventional security measures. This proactive approach enables organizations to quickly identify and mitigate these sophisticated exploits, strengthening the protection of critical systems and reducing the risk of compromise from targeted cyber threats.",
            "references": [
                "https://www.crowdstrike.com/en-us/blog/addressing-threat-landscape-with-intel-and-ai/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1110",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of brute force attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nBrute force attacks involve adversaries attempting to gain unauthorized access to systems by systematically guessing passwords or encryption keys. These attacks often involve high volumes of login attempts or other forms of credential stuffing, exploiting weak or reused passwords. Intel TDT plays a key role in identifying these attacks by providing real-time telemetry on program execution, memory access, and control flow, enabling security teams to detect abnormal behaviors such as unusually high login attempts, suspicious API calls, or rapid access attempts that may indicate brute force activity.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as repeated login failures, dictionary attacks, or other signs of brute force methods used to bypass security defenses.\n\nBy leveraging Intel TDT and CAMS's combined capabilities, organizations can detect and stop brute force attacks more efficiently, strengthening their defenses against unauthorized access and reducing the risk of compromise from credential-based threats.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1550",
            "attack_object_name": "Use Alternate Authentication Material",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT) with CrowdStrike Falcon Accelerated Memory Scanning (CAMS) provides security capabilities to enhance cybersecurity defenses. This dynamic solution improves CrowdStrike Falcon by enabling the detection of cyber threats earlier in the kill chain and in real time, with minimal impact on system performance.\n\nExploits targeting authentication mechanisms, such as those using stolen credentials or bypassing traditional authentication processes, are common tactics for gaining unauthorized access to systems. Intel TDT plays a crucial role by providing deep, real-time detection on program execution, memory access, and control flow at the hardware level. This data helps security teams detect abnormal behaviors, such as suspicious authentication attempts or unauthorized interactions that could indicate misuse of alternate authentication material.\n\nIn addition, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity. By combining Intel TDT’s  with AMS’s memory scanning capabilities, this solution provides powerful defense against evasive exploits that attempt to abuse alternate authentication material, enhancing the protection of critical systems from advanced cyber threats.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1550.003",
            "attack_object_name": "Pass the Ticket",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1550",
            "comments": "Intel Threat Detection Technology (TDT) combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS) enhances cybersecurity defenses by enabling faster, real-time detection of Pass-the-Ticket (PTT) attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system impact.\n\nPass-the-Ticket (PTT) attacks involve attackers stealing and reusing Kerberos authentication tickets to gain unauthorized access to network resources. These attacks bypass traditional authentication mechanisms, making them a powerful tool for lateral movement within a network. Intel TDT plays a critical role in identifying these threats by providing deep, real-time detection of program execution, memory access, and control flow at the hardware level. This telemetry allows security teams to quickly detect abnormal behaviors, such as suspicious use of Kerberos tickets or unauthorized interactions with authentication processes, which are indicative of PTT activity.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without compromising system performance. CAMS is capable of identifying and preventing suspicious behavior, such as the running of executables masquerading as legitimate files, or the execution of potentially malicious code involved in PTT attacks.\n\nBy combining Intel TDT’s real-time telemetry with AMS’s advanced memory scanning capabilities, this solution provides a powerful defense against evasive Pass-the-Ticket attacks.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1071",
            "attack_object_name": "Application Layer Protocol",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Application Layer Protocol (ALP) attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nApplication Layer Protocol (ALP) attacks exploit vulnerabilities in protocols like HTTP, HTTPS, DNS, or SMB to manipulate network traffic or gain unauthorized access to systems. Intel TDT plays a crucial role in identifying these attacks by providing real-time telemetry on program execution, memory access, and control flow, enabling quick detection of abnormal behaviors within application protocols that could signal an ongoing attack.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, including code execution that targets application layer protocols or masquerades as legitimate processes.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059.003",
            "attack_object_name": "Windows Command Shell",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1059",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Windows Command Shell exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nWindows Command Shell exploits often involve adversaries using command-line interfaces (such as PowerShell or cmd.exe) to execute unauthorized commands, often bypassing traditional security controls. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate misuse of command shell functionality for malicious purposes.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized command execution or attempts to exploit the Windows Command Shell for executing malicious code.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1134.002",
            "attack_object_name": "Create Process with Token",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1134",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of \"Create Process with Token\" exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\n\"Create Process with Token\" exploits involve adversaries using the Windows API to create a process under the security context of another user, often leveraging stolen credentials or escalated privileges to execute malicious code. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate misuse of the “Create Process” API for unauthorized actions.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the creation of unauthorized processes or attempts to misuse the “Create Process” function to bypass security controls and execute malicious code.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1134",
            "attack_object_name": "Access Token Manipulation",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of \"Access Token Manipulation\" exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\n\"Create Process\" exploits involve adversaries using the Windows API to create a process under the security context of another user, often leveraging stolen credentials or escalated privileges to execute malicious code. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate misuse of the “Create Process” API for unauthorized actions.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the creation of unauthorized processes or attempts for token manipulation that function to bypass security controls and execute malicious code.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1547.001",
            "attack_object_name": "Registry Run Keys / Startup Folder",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1547",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Registry Run Key exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nRegistry Run Key exploits involve adversaries modifying the Windows registry, specifically adding malicious entries to auto-start processes upon system boot or user login. These attacks often enable persistence and are used to execute malicious code every time a system restarts, bypassing traditional security mechanisms. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate unauthorized changes to registry keys.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to registry run keys or attempts to bypass security controls by executing malicious code during system startup.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1070.004",
            "attack_object_name": "File Deletion",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1070",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of file deletion exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nFile deletion exploits involve adversaries using malicious techniques to delete critical files or system components, often to disrupt operations or cover their tracks after executing an attack. These actions may include removing logs, system configurations, or other files vital to the operation of security defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate unauthorized file deletion actions.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as attempts to delete critical files or cover up traces of malicious activity, providing a proactive defense against attackers trying to evade detection through file manipulation.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1560.001",
            "attack_object_name": "Archive via Utility",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1560",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Archive via Utility exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nArchive via Utility techniques involve adversaries using common system utilities (such as Windows’ built-in compression tools) to archive or compress files, often to evade detection or exfiltrate sensitive data. These actions are commonly used to obfuscate malicious files or prepare for the delivery of large amounts of stolen data. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as suspicious archive or compression utility activity that could indicate data exfiltration or malicious file manipulation.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the unauthorized use of compression or archive utilities for evading detection or preparing exfiltration, providing proactive defense against these evasive techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1074",
            "attack_object_name": "Data Staged",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of data staged attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData staged attacks involve adversaries preparing stolen data or malicious payloads on a system, often in hidden or obfuscated locations, in anticipation of later exfiltration or execution. These attacks typically involve the collection, compression, or movement of data to make it easier to exfiltrate or deploy at a later stage, while avoiding detection by security tools. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as suspicious file movements or data manipulation that could indicate data staging or preparation for exfiltration.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the unauthorized preparation or obfuscation of data for exfiltration, providing proactive defense against evasive data staging techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1569",
            "attack_object_name": "System Services",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection when  system services are abused by adversaries. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nAbuse of System Services involves adversaries exploiting legitimate system services to execute malicious commands or maintain persistence on a compromised system. Attackers may manipulate services like Windows Management Instrumentation (WMI), Service Control Manager (SCM), or other system processes to gain unauthorized access, execute payloads, or escalate privileges. Intel TDT provides real-time telemetry on program execution, memory access, and control flow, allowing security teams to quickly detect abnormal behaviors, such as suspicious service manipulation or attempts to hijack system services for malicious purposes.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized service execution or attempts to abuse system services for lateral movement or persistence, providing proactive defense against these evasive attack techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1021.002",
            "attack_object_name": "SMB/Windows Admin Shares",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1021",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of SMB/Windows Admin Shares exploitation attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nSMB/Windows Admin Shares attacks involve adversaries exploiting Windows file-sharing services (such as Server Message Block or SMB) and administrative shares (e.g., C$ or ADMIN$) to gain unauthorized access to sensitive files, move laterally within a network, or escalate privileges. Attackers often use these shares to exfiltrate data, deploy malware, or maintain persistence on compromised systems. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect suspicious SMB/Windows Admin Shares activity, such as unauthorized access or exploitation of shared resources.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify abnormal behaviors, such as unauthorized file access or attempts to exploit SMB/Windows Admin Shares for lateral movement, providing proactive defense against these evasive attack techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1056.001",
            "attack_object_name": "Keylogging",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1056",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Keylogging exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nKeylogging attacks involve adversaries deploying malicious software that records keystrokes to capture sensitive information such as passwords, credit card numbers, and other private data. These attacks can run stealthily in the background, often evading detection by traditional security tools. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as suspicious processes or unusual interactions with keyboard input buffers, which are indicative of keylogging activity.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized monitoring of keystrokes or attempts to exfiltrate captured data, providing proactive defense against evasive keylogging technique",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1056",
            "attack_object_name": "Input Capture",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Input Capture exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nInput Capture attacks involve adversaries using malicious software to intercept or record user inputs, such as keystrokes, mouse clicks, or other device interactions. These attacks are often used to steal sensitive data, such as login credentials, personal information, or other private data. The captured input can then be exfiltrated or used for further exploitation. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that may indicate the interception of user input or manipulation of input devices.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized monitoring or logging of user inputs, providing proactive defense against evasive input capture techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1115",
            "attack_object_name": "Clipboard Data",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Clipboard Data exploits. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nClipboard Data attacks involve adversaries gaining unauthorized access to the contents of the clipboard, often to steal sensitive information such as passwords, credit card details, or other personal data. These attacks exploit the clipboard functionality to extract or manipulate data copied by the user, and can be used to harvest information for further exploitation or exfiltration. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as unauthorized access or modification of clipboard data.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized reading or modification of clipboard contents, providing proactive defense against these stealthy data theft techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1003",
            "attack_object_name": "OS Credential Dumping",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of OS Credential Dumping exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nOS Credential Dumping attacks involve adversaries extracting and harvesting credentials (such as usernames and passwords) from an operating system’s memory or other storage locations. These credentials can then be used for lateral movement within the network, escalating privileges, or exfiltrating sensitive data. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the detection of abnormal behaviors that indicate unauthorized credential access or attempts to dump sensitive information from memory.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized credential extraction or memory dumping activities, providing proactive defense against these stealthy techniques used by attackers to gain access to critical systems.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1003.002",
            "attack_object_name": "Security Account Manager",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1003",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Security Account Manager (SAM) Credential Dumping exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nSAM Credential Dumping attacks involve adversaries targeting the Security Account Manager (SAM) database, which stores user account information and password hashes. Attackers use tools and techniques to dump this sensitive data from the system’s memory, enabling them to extract account credentials, escalate privileges, or move laterally within the network. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing the detection of abnormal behaviors that signal unauthorized access to the SAM or attempts to extract user credentials from the system.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized access to the SAM database or credential dumping attempts, providing proactive defense against these stealthy techniques used by attackers to gain access to critical systems.",
            "references": [
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1543.003",
            "attack_object_name": "Windows Service",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1543",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against Windows Services Abuse\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Advanced Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Windows Services abuse. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nWindows Services abuse involves adversaries leveraging Windows services to maintain persistence, escalate privileges, or execute malicious code without detection. Attackers may exploit vulnerabilities in system services or misconfigurations to inject malicious code, modify service configurations, or elevate privileges. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing the detection of abnormal behaviors that could indicate misuse of Windows services for malicious purposes.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized service modifications, service injection attempts, or privilege escalation via Windows services, providing proactive defense against these evasive techniques used by attackers to compromise critical systems.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1543",
            "attack_object_name": "Create or Modify System Process",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of \"Create or Modify System Process\" attacks. This integrated solution enhances CrowdStrike Falcon, allowing it to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\n\"Create or Modify System Process\" attacks involve adversaries creating new processes or modifying existing system processes to execute malicious code, escalate privileges, or maintain persistence within the system. Attackers often exploit system vulnerabilities, misconfigurations, or weak security controls to alter process behaviors and bypass security defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing for rapid detection of abnormal behaviors that could indicate the creation or manipulation of system processes for malicious purposes.\n\nAdditionally, CAMS offloads memory scanning tasks from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized process creation or modifications to critical system processes, providing proactive defense against attacks designed to compromise or manipulate essential system functions.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1005",
            "attack_object_name": "Data from Local System",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Data from Local System Exfiltration attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData from Local System Exfiltration attacks involve adversaries attempting to steal sensitive data from local systems, often bypassing traditional security mechanisms to move files or information outside of the organization’s network. These attacks typically target stored data on endpoint devices, including user files, credentials, or other critical assets, and move it to unauthorized locations, such as external servers or cloud storage. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors indicative of data being transferred or copied from local systems.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized file transfers, abnormal data movement, or processes involved in data exfiltration, providing proactive defense against these evasive techniques and ensuring the protection of critical data from theft or leakage.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1119",
            "attack_object_name": "Automated Collection",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Automated Collection attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nAutomated Collection attacks involve adversaries using automated tools or scripts to systematically gather sensitive data from local systems, such as documents, credentials, or other valuable information. These attacks are often designed to collect large volumes of data without alerting security systems, preparing it for exfiltration or malicious use. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to quickly detect unusual patterns of data collection or manipulation that could indicate an ongoing attack.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized collection of data or the use of automated tools to extract sensitive information, providing proactive defense against these stealthy techniques. This solution ensures that organizations can detect and mitigate automated collection attempts before sensitive data is compromised.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1036.002",
            "attack_object_name": "Right-to-Left Override",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1036",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against Right-to-Left Override Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Advanced Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Right-to-Left Override (RTLO) attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nRight-to-Left Override (RTLO) attacks exploit character encoding to manipulate the way text is displayed, often used to trick users into executing malicious files or to bypass security filters. In these attacks, attackers use the RTLO control character to reverse the visual display of text, such as making a file appear harmless by misleading the user about its true extension. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as attempts to manipulate file names or execute commands through deceptive displays.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the use of RTLO to obfuscate filenames or payloads that would otherwise be flagged by security systems, providing proactive defense against this evasive technique. This solution ensures that organizations can detect and prevent RTLO attacks before they successfully deceive users or bypass security measures.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1036",
            "attack_object_name": "Masquerading",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of masquerading attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nMasquerading attacks involve adversaries manipulating the appearance of files, processes, or system behaviors to make them appear legitimate, thereby evading detection by security tools and tricking users or administrators. Attackers commonly use masquerading techniques to disguise malicious files as trusted system files or applications. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This allows security teams to detect abnormal behaviors, such as suspicious processes, file names, or interactions that suggest a malicious actor is attempting to mask their activity.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as files or processes that masquerade as legitimate system operations or applications, providing proactive defense against these evasive techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of brute force attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nBrute force attacks involve adversaries attempting to gain unauthorized access to systems by systematically guessing passwords or encryption keys. These attacks often involve high volumes of login attempts or other forms of credential stuffing, exploiting weak or reused passwords. Intel TDT plays a key role in identifying these attacks by providing real-time telemetry on program execution, memory access, and control flow, enabling security teams to detect abnormal behaviors such as unusually high login attempts, suspicious API calls, or rapid access attempts that may indicate brute force activity.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as repeated login failures, dictionary attacks, or other signs of brute force methods used to bypass security defenses.\n\nBy leveraging Intel TDT and CAMS's combined capabilities, organizations can detect and stop brute force attacks more efficiently, strengthening their defenses against unauthorized access and reducing the risk of compromise from credential-based threats.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1018",
            "attack_object_name": "Remote System Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of remote system discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nRemote system discovery attacks involve adversaries scanning networks to identify and map out systems, devices, and services that can be exploited for further compromise. Attackers use tools and techniques to probe remote systems, gathering information about network shares, open ports, running services, and active hosts. Intel TDT plays a critical role in detecting these types of activities by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to quickly spot abnormal behaviors like unauthorized network scans, service discovery attempts, or unusual API calls related to system enumeration.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized scanning processes or attempts to interact with remote systems for reconnaissance purposes.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1095",
            "attack_object_name": "Non-Application Layer Protocol",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of non-application layer protocol attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nNon-application layer protocol attacks involve adversaries exploiting lower-level protocols (such as TCP, UDP, ICMP, or others) to interact directly with network services, bypassing the traditional application layer defenses. These attacks are often used for network reconnaissance, denial-of-service (DoS), or to exploit vulnerabilities in network infrastructure, without interacting with application-level protocols like HTTP, HTTPS, or FTP. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate malicious activity in these non-application layer protocols.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors such as unauthorized network interactions, unusual traffic patterns, or attempts to exploit vulnerabilities in non-application layer protocols, providing proactive defense against these low-level network-based attacks.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1041",
            "attack_object_name": "Exfiltration Over C2 Channel",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of exfiltration over Command and Control (C2) channels. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nExfiltration over C2 involves adversaries using a Command and Control (C2) infrastructure to stealthily send sensitive data from compromised systems to an external server. This type of data exfiltration is often encrypted or obfuscated to avoid detection, and it may occur through various C2 protocols such as HTTP, DNS, or custom protocols. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate data being siphoned through C2 channels.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors such as unauthorized data transfers, unusual network connections, or attempts to evade security controls during data exfiltration via C2 channels, providing proactive defense against these covert data theft techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1113",
            "attack_object_name": "Screen Capture",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of screen capture attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nScreen capture attacks involve adversaries using malicious software to secretly capture screenshots or screen recordings from compromised systems. These attacks often target sensitive information visible on the screen, such as login credentials, financial data, or personal information, and send it back to an external attacker-controlled server. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors such as unauthorized screen capture or the use of screen-grabbing utilities.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the use of unauthorized screen capture software, interactions with the graphics subsystem, or attempts to capture sensitive on-screen data.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1055",
            "attack_object_name": "Process Injection",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Process Injection attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nProcess Injection is a technique where attackers insert malicious code into the address space of a legitimate process in order to evade detection, gain unauthorized access, or execute arbitrary code under the guise of a trusted process. This method is often used by malware to bypass security measures, maintain persistence, and carry out actions without triggering suspicion. Common techniques include DLL injection, code cave injection, and thread injection, among others.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This detailed telemetry allows security teams to detect abnormal behaviors, such as the unauthorized injection of code into legitimate processes, suspicious memory access patterns, or unexpected changes in control flow that could indicate an ongoing Process Injection attack.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1222",
            "attack_object_name": "File and Directory Permissions Modification",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of File and Directory Permissions Modifications. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nFile and Directory Permissions Modifications involve attackers altering the access controls and permissions of files or directories on a system to gain unauthorized access, escalate privileges, or maintain persistence. These modifications can bypass traditional security measures, allowing attackers to manipulate or execute malicious files, exfiltrate data, or evade detection. This technique is commonly used during lateral movement or post-exploitation phases to facilitate further exploitation of compromised systems.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This detailed telemetry enables security teams to detect abnormal behaviors, such as suspicious file or directory permission changes, unauthorized privilege escalations, or attempts to modify access controls, signaling potential misuse of file and directory permissions to facilitate malicious activities.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1489",
            "attack_object_name": "Service Stop",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Service Stop attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nService Stop attacks involve adversaries stopping or disabling critical system services, often to hinder security monitoring tools or other protective mechanisms. By terminating essential services, attackers can reduce the effectiveness of security defenses, disrupt system operations, or create an environment for further exploitation. Service stopping techniques are often used in the post-exploitation phase to maintain persistence or cover tracks by neutralizing security controls.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This data helps security teams detect abnormal behaviors, such as suspicious service stoppages, unauthorized service manipulations, or attempts to disable critical system processes. These indicators of compromise signal potential abuse of service control functions to undermine security or facilitate malicious activities.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon AcceleratedMemory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Exploits from Remote Services. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nExploits from Remote Services involve adversaries targeting vulnerabilities in network-facing services such as RDP, SMB, or SSH, to execute malicious code remotely. These attacks can allow attackers to gain unauthorized access to systems, elevate privileges, or move laterally within a network, often bypassing perimeter defenses. Remote service exploits are frequently used in ransomware, espionage, and other forms of cyberattacks that target high-value systems or data.\n\nIntel TDT plays a critical role in identifying these threats by providing deep, real-time telemetry on program execution, memory access, and control flow. This data allows security teams to quickly detect abnormal behaviors that indicate potential exploitation of remote services, such as suspicious command execution or unauthorized access to remote systems. By continuously monitoring these low-level activities, Intel TDT helps identify attempts to exploit remote services, preventing malicious actions before they can cause significant damage.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1558",
            "attack_object_name": "Steal or Forge Kerberos Tickets",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Steal or Forge Kerberos Tickets. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nSteal or Forge Kerberos Tickets techniques involve attackers stealing or forging Kerberos authentication tickets, such as Ticket Granting Tickets (TGTs) or Service Tickets (TGS), to gain unauthorized access to network resources. By bypassing traditional authentication mechanisms, these attacks allow adversaries to move laterally within the network or escalate privileges without detection. This type of attack is commonly used in advanced persistent threats (APT) and other sophisticated attacks that target credential-based systems to gain access to sensitive data or systems.\n\n AMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without compromising system performance. CAMS helps identify suspicious behaviors, including unauthorized ticket generation or manipulation, providing proactive defense against Kerberos ticket theft and forgery attempts.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Permissions Group Discovery attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nPermissions Group Discovery techniques involve attackers querying and discovering permissions associated with different user groups and system accounts. By identifying group memberships and associated permissions, adversaries can gain critical insight into the system's security configuration, which may help them target high-privilege accounts or escalate their access. These techniques are often used in the early stages of lateral movement, allowing attackers to plan and execute privilege escalation or data exfiltration strategies.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry helps security teams quickly detect abnormal behaviors, such as unauthorized attempts to query permissions groups or access sensitive system configurations. By continuously monitoring these low-level activities, Intel TDT can reveal attempts to map user groups or escalate privileges.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1069",
            "attack_object_name": "Permission Groups Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Permissions Group Discovery attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nPermissions Group Discovery techniques involve attackers querying and discovering permissions associated with different user groups and system accounts. By identifying group memberships and associated permissions, adversaries can gain critical insight into the system's security configuration, which may help them target high-privilege accounts or escalate their access. These techniques are often used in the early stages of lateral movement, allowing attackers to plan and execute privilege escalation or data exfiltration strategies.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry helps security teams quickly detect abnormal behaviors, such as unauthorized attempts to query permissions groups or access sensitive system configurations. By continuously monitoring these low-level activities, Intel TDT can reveal attempts to map user groups or escalate privileges.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1049",
            "attack_object_name": "System Network Connections Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in combination with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), bolsters cybersecurity defenses by enabling faster, real-time detection of System Network Connection Discovery attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while maintaining minimal system performance impact.\n\nSystem Network Connection Discovery techniques are used by attackers to map out network connections and identify systems or services they can potentially exploit. These techniques often involve discovering active network connections, open ports, or remote services that can be leveraged for lateral movement or privilege escalation. Attackers may scan a network to identify targets or vulnerable systems that they can compromise, and later exfiltrate data or further infiltrate the environment.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1087.002",
            "attack_object_name": "Domain Account",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1087",
            "comments": "Intel Threat Detection Technology (TDT), in combination with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Account or Domain Account Discovery attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nAccount or Domain Account Discovery techniques involve attackers enumerating user accounts or domain accounts within an organization. By discovering valid user credentials or domain accounts, adversaries can identify targets for further attacks, including lateral movement, privilege escalation, or credential harvesting. These techniques are often used to gather critical information about account structures, access levels, and administrative rights, enabling attackers to plan their next move more effectively.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry helps security teams detect abnormal behaviors, such as unauthorized attempts to query or enumerate user or domain accounts, often indicating reconnaissance or preparation for lateral movement. By continuously monitoring low-level system activities, Intel TDT can quickly detect and alert on suspicious actions targeting account or domain account discovery.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1087",
            "attack_object_name": "Account Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in combination with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Account or Domain Account Discovery attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nAccount or Domain Account Discovery techniques involve attackers enumerating user accounts or domain accounts within an organization. By discovering valid user credentials or domain accounts, adversaries can identify targets for further attacks, including lateral movement, privilege escalation, or credential harvesting. These techniques are often used to gather critical information about account structures, access levels, and administrative rights, enabling attackers to plan their next move more effectively.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry helps security teams detect abnormal behaviors, such as unauthorized attempts to query or enumerate user or domain accounts, often indicating reconnaissance or preparation for lateral movement. By continuously monitoring low-level system activities, Intel TDT can quickly detect and alert on suspicious actions targeting account or domain account discovery.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1007",
            "attack_object_name": "System Service Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in conjunction with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of System Service Discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nSystem Service Discovery techniques involve attackers identifying and enumerating services running on a compromised system. By discovering active services, adversaries can assess which system functionalities are available, determine attack vectors for further exploitation, or locate valuable services to target for lateral movement or privilege escalation. These techniques often focus on services like Windows Management Instrumentation (WMI), Remote Desktop Protocol (RDP), or other critical infrastructure services that could be leveraged for malicious actions.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry helps security teams detect abnormal behaviors, such as unauthorized queries or interactions with system services, that could indicate reconnaissance activities aimed at identifying or exploiting system services. By continuously monitoring these low-level activities, Intel TDT enables rapid detection and mitigation of attempts to discover and target system services for malicious purposes.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1571",
            "attack_object_name": "Non-Standard Port",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Non-Standard Port exploitation. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing the impact on system performance.\n\nNon-Standard Port techniques involve adversaries using ports outside of the commonly recognized and secure range (e.g., ports 80 for HTTP, 443 for HTTPS) to communicate with compromised systems or exfiltrate data. These tactics help attackers avoid detection by security monitoring systems that primarily focus on well-known ports, making it harder for traditional security tools to identify malicious activities. By employing non-standard ports, attackers can bypass firewalls and network defenses, potentially facilitating covert communication or malicious data transfers.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow at the hardware level. This telemetry enables the detection of abnormal behaviors, such as suspicious outbound network traffic on non-standard ports or unauthorized applications attempting to communicate over unusual protocols. By closely monitoring low-level activities, Intel TDT helps security teams spot these covert methods of communication, preventing attackers from exploiting non-standard ports for command and control or data exfiltration.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1552",
            "attack_object_name": "Unsecured Credentials",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in combination with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling the detection of Unsecured Credentials in real time. This integrated solution strengthens CrowdStrike Falcon, allowing it to identify and mitigate cyber threats earlier in the attack chain, while maintaining minimal system impact.\n\nUnsecured Credentials are often exposed or misused by attackers who leverage weak storage or transmission methods to steal sensitive information. These credentials can be captured from insecure files, memory, or network traffic, allowing adversaries to gain unauthorized access to systems. Intel TDT provides real-time telemetry, capturing detailed program execution data and memory access patterns to identify suspicious behavior that may signal the misuse or storage of unsecured credentials.\n\nAMS complements this by offloading intensive memory scanning tasks to the Intel Integrated GPU, ensuring efficient detection without performance degradation. By quickly spotting unsecured credential usage or abnormal access patterns, this integrated approach enables proactive defense against attacks targeting sensitive authentication data.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059.005",
            "attack_object_name": "Visual Basic",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1059",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling the real-time detection of Visual Basic (VB) Adversarial Techniques. This dynamic solution enhances CrowdStrike Falcon, providing early detection and mitigation of cyber threats, all while minimizing system performance impact.\n\nVisual Basic Adversarial Techniques involve attackers leveraging scripting or automation tools such as VBScript or Visual Basic for Applications (VBA) to execute malicious code. These techniques often bypass traditional security defenses by running within trusted applications (like Microsoft Office), enabling attackers to execute payloads without triggering alarms. Intel TDT offers deep visibility into program execution, memory access, and control flow, enabling rapid identification of malicious activities or suspicious patterns indicative of VB-based exploits.\n\nAMS offloads memory scanning tasks to the Intel Integrated GPU, ensuring that scanning does not compromise system performance while providing fast detection of these evasive techniques. By quickly identifying VB-based attacks, such as malicious macros or script injections, this combined solution strengthens defenses against adversaries using Visual Basic as an attack vector.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1136.001",
            "attack_object_name": "Local Account",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1136",
            "comments": "Intel Threat Detection Technology (TDT), in conjunction with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling the detection of Local Account Creation techniques (T1136.001) in real time. This integrated solution strengthens CrowdStrike Falcon, allowing for faster detection and mitigation of threats earlier in the kill chain while minimizing system performance impact.\n\nLocal Account Creation involves adversaries creating new local accounts on compromised systems to maintain persistence or elevate privileges. These accounts are often used to bypass authentication mechanisms or provide unauthorized access to a system. Intel TDT plays a key role by providing granular visibility into program execution, memory access, and control flow, enabling the detection of suspicious account creation or modifications. This real-time telemetry helps identify unusual behaviors, such as unauthorized attempts to create or modify local accounts.\n\nAMS offloads memory scanning from the CPU to the Intel Integrated GPU, ensuring that detection remains fast and efficient, without compromising system performance. This combined solution provides a powerful defense against Local Account Creation techniques, helping organizations quickly identify and neutralize threats aimed at gaining unauthorized access through local accounts.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in conjunction with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling the detection of Local Account Creation techniques (T1136.001) in real time. This integrated solution strengthens CrowdStrike Falcon, allowing for faster detection and mitigation of threats earlier in the kill chain while minimizing system performance impact.\n\nLocal Account Creation involves adversaries creating new local accounts on compromised systems to maintain persistence or elevate privileges. These accounts are often used to bypass authentication mechanisms or provide unauthorized access to a system. Intel TDT plays a key role by providing granular visibility into program execution, memory access, and control flow, enabling the detection of suspicious account creation or modifications. This real-time telemetry helps identify unusual behaviors, such as unauthorized attempts to create or modify local accounts.\n\nAMS offloads memory scanning from the CPU to the Intel Integrated GPU, ensuring that detection remains fast and efficient, without compromising system performance. This combined solution provides a powerful defense against Local Account Creation techniques, helping organizations quickly identify and neutralize threats aimed at gaining unauthorized access through local accounts.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1218",
            "attack_object_name": "System Binary Proxy Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of System Binary Proxy Execution techniques. This integrated solution strengthens CrowdStrike Falcon, enabling the detection and mitigation of cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nSystem Binary Proxy Execution (T1218) involves adversaries executing malicious code through legitimate system binaries or processes to evade detection. Attackers often use system tools like rundll32.exe, wmic.exe, or regsvr32.exe as proxies to launch malicious payloads, leveraging trusted binaries to bypass security controls. Intel TDT provides deep visibility into program execution, memory access, and control flow, allowing security teams to detect abnormal behaviors, such as unusual interactions with trusted system binaries, that could indicate proxy execution or malicious activity.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1567",
            "attack_object_name": "Exfiltration Over Web Service",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in combination with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity by enabling faster, real-time detection of Exfiltration Over Web Services (T1041). This integrated solution enhances CrowdStrike Falcon, improving the ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system impact.\n\nExfiltration Over Web Services involves adversaries using web-based protocols (such as HTTP, HTTPS, or APIs) to covertly send stolen data from an infected system to an external server or command-and-control infrastructure. These attacks often exploit legitimate web traffic to evade detection by traditional security mechanisms. Intel TDT plays a key role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This telemetry enables the rapid detection of abnormal behaviors, such as unusual API calls, HTTP traffic patterns, or data flows indicative of exfiltration.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1102",
            "attack_object_name": "Web Service",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Exfiltration Over Web Services (T1102). This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nExfiltration Over Web Services (T1102) involves adversaries using web services, such as HTTP/S, SOAP, or other web protocols, to exfiltrate sensitive data from compromised systems to external servers. Attackers often leverage common web service APIs to transfer stolen data covertly, bypassing traditional security mechanisms and monitoring systems. Intel TDT provides real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect abnormal behaviors, such as unusual API calls or unauthorized interactions with web service endpoints, indicative of potential data exfiltration activity.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1560",
            "attack_object_name": "Archive Collected Data",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Archive Collected Data (T1020). This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nArchive Collected Data (T1020) involves adversaries collecting and archiving large volumes of sensitive or stolen data, often using system utilities like compression or archiving tools, in preparation for exfiltration. These archived files, such as ZIP or TAR archives, are commonly used to obfuscate or compress data to avoid detection during the exfiltration process. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors like suspicious use of archiving utilities or the manipulation of file systems that indicate data collection for exfiltration.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1114",
            "attack_object_name": "Email Collection",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Email Collection (T1114). This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nEmail Collection (T1114) involves adversaries targeting email clients or servers to gather sensitive information from email communications. This could include using malicious scripts, tools, or exploiting email protocols to harvest large amounts of email data, often for espionage or data theft. Intel TDT plays a critical role by providing real-time telemetry on program execution, memory access, and control flow, enabling the detection of abnormal behaviors associated with email client manipulation or unauthorized email access.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activities related to email collection without impacting system performance. CAMS identifies suspicious behaviors such as unauthorized access to email accounts, unusual data retrieval patterns, or attempts to extract sensitive email content, providing proactive defense against email-based data exfiltration techniques",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1570",
            "attack_object_name": "Lateral Tool Transfer",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Lateral Tool Transfer (T1075). This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nLateral Tool Transfer (T1075) involves adversaries moving tools and utilities between systems within a compromised network to further their attacks or escalate privileges. This technique is often used to deploy malware, command-and-control (C2) tools, or other utilities that can facilitate lateral movement within the network. Intel TDT plays a critical role by providing real-time telemetry on program execution, memory access, and control flow, enabling the detection of abnormal behaviors related to unauthorized transfers or usage of network tools.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity related to lateral tool transfers without degrading system performance",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Abuse of Valid Accounts (T1071). This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nAbuse of Valid Accounts (T1071) occurs when adversaries leverage legitimate credentials to gain unauthorized access to systems or networks. This can include the theft, misuse, or hijacking of valid user accounts, which allows attackers to bypass security measures and blend in with legitimate user activity. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate the misuse of valid accounts for malicious purposes.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the use of stolen credentials or the execution of unauthorized actions by a legitimate user account.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1021.006",
            "attack_object_name": "Windows Remote Management",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1021",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Windows Remote Management (T1028) attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nWindows Remote Management (T1028) allows administrators to remotely manage Windows systems, but it is also frequently targeted by adversaries to gain remote access to a network. Attackers often exploit Windows Management Instrumentation (WMI) or PowerShell remoting to issue commands, execute code, or move laterally across a network using this tool. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling detection of unusual or unauthorized use of remote management tools, such as unexpected remote sessions or malicious commands being issued to target systems.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1106",
            "attack_object_name": "Native API",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of attacks exploiting Native APIs. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nNative API attacks involve adversaries using operating system-level APIs to execute malicious code, manipulate processes, or bypass security mechanisms. These attacks often leverage system calls to gain control over a system, execute commands, or escalate privileges. Intel TDT provides deep, real-time telemetry on program execution, memory access, and control flow, helping security teams quickly identify suspicious API usage or abnormal behaviors that could indicate exploitation of Native APIs.\n\nAdditionally, CAMS offloads the memory scanning workload to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity. This helps identify unusual interactions with Native APIs, allowing organizations to detect and mitigate sophisticated attacks before they can cause significant damage.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1105",
            "attack_object_name": "Ingress Tool Transfer",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against Ingress Tool Transfer Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Ingress Tool Transfer (ITT) attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nIngress Tool Transfer involves adversaries transferring malicious tools or scripts into a compromised environment, often to establish footholds, escalate privileges, or execute additional stages of an attack. These tools can be transferred through various methods, such as file-sharing services, network shares, or utilizing external media like USB devices. In the context of a larger attack, this transfer is a critical phase that allows the attacker to introduce malicious payloads, enabling further exploitation of the system.\n\nIntel TDT plays a crucial role in identifying these threats by providing deep, real-time telemetry on program execution, memory access, and control flow. This telemetry helps security teams rapidly detect abnormal behaviors, such as unauthorized file transfers, network communications, or tool downloads that could signal an ingress tool transfer. By monitoring these low-level activities, TDT makes it easier to identify the transfer of malicious files, scripts, or other tools commonly used to expand the attack surface.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1057",
            "attack_object_name": "Process Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of process discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nProcess discovery involves adversaries identifying and listing active processes on a compromised system to locate targets for further exploitation or lateral movement. Attackers may use process discovery to identify running security tools, user applications, or system services that could be manipulated, disabled, or evaded. By gaining insight into the processes running on a system, attackers can better understand the environment and adapt their tactics to evade detection.\n\nIntel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect abnormal behaviors that could indicate unauthorized process discovery activity. This telemetry enables rapid detection of attempts to enumerate or interact with system processes, whether through direct API calls or indirect methods such as scanning memory or accessing system information.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1047",
            "attack_object_name": "Windows Management Instrumentation",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Windows Management Instrumentation (WMI) attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nWMI attacks leverage the Windows Management Instrumentation service to gather information about a system, execute commands, or establish persistence. Adversaries can use WMI to execute malicious scripts or commands remotely, collect system information, and even automate tasks on a compromised machine. These attacks are often stealthy, as WMI operations can be run in the background without triggering obvious alerts. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect suspicious WMI activity, such as unauthorized process creation or command execution.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, providing faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the use of WMI for unauthorized system interaction or automation of malicious tasks, ensuring a proactive defense against these stealthy techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1112",
            "attack_object_name": "Modify Registry",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Modify Registry attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing impact on system performance.\n\nModify Registry attacks involve adversaries modifying the Windows registry to alter system settings, initiate processes, or maintain persistence within a system. Malicious modifications to the registry can enable attackers to execute malicious code on system startup, disrupt security configurations, or maintain elevated privileges over time. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal registry activity indicative of unauthorized changes.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to critical registry keys, which may indicate attempts to escalate privileges, evade detection, or maintain persistence on a compromised system.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1548.002",
            "attack_object_name": "Bypass User Account Control",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1548",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Bypass User Access Control (UAC) attempts. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nBypass User Access Control (UAC) attacks involve adversaries attempting to circumvent security features like UAC, which is designed to prompt users for administrative permissions before allowing potentially risky actions. Attackers commonly exploit UAC weaknesses or misconfigurations to gain higher privileges on a system, enabling them to run malicious code with administrative rights without the user's consent. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling quick detection of abnormal behaviors that indicate attempts to bypass UAC mechanisms.\n\nAdditionally, CAMS offloads the resource-intensive memory scanning tasks from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity while maintaining system performance. CAMS helps identify suspicious actions, such as the manipulation of UAC prompts or unauthorized privilege escalations, which are indicative of attempts to bypass User Access Control mechanisms.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1548",
            "attack_object_name": "Abuse Elevation Control Mechanism",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Abuse Elevation Control Mechanisms. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nAbuse Elevation Control Mechanisms involves adversaries exploiting weaknesses in the operating system or applications to elevate privileges, often bypassing security mechanisms designed to prevent unauthorized access. Attackers typically target flaws in User Account Control (UAC), credential validation, or other access controls to escalate privileges to administrative or system levels. Once elevated, they can execute malicious code, access sensitive information, or further compromise the system. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that indicate abuse of elevation control mechanisms.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning tasks from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without impacting system performance. CAMS can identify suspicious behaviors such as attempts to bypass UAC prompts or the unauthorized elevation of privileges, which are indicative of efforts to gain unauthorized access to higher system privileges.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1546",
            "attack_object_name": "Event Triggered Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against System, Owner, User, and Network Information Discovery Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of System, Owner, User, and Network Information Discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nSystem, Owner, User, and Network Information Discovery attacks involve adversaries attempting to collect detailed information about the system they’ve infiltrated. Attackers gather data about the operating system, local users, network configurations, system owner, active connections, and network shares. This information is typically used to plan further exploitation, lateral movement, and privilege escalation within the target network. By querying system properties, user accounts, and network settings, attackers gain the intelligence necessary for executing advanced attacks. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling quick detection of abnormal activities like unauthorized information gathering from system and network resources.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of suspicious activity without negatively impacting system performance. CAMS is capable of identifying the unauthorized collection of system, user, or network-related data, helping to detect when attackers are gathering intelligence for the purpose of launching further attacks.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1033",
            "attack_object_name": "System Owner/User Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against System, Owner, User, and Network Information Discovery Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Advanced Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of System, Owner, User, and Network Information Discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nSystem, Owner, User, and Network Information Discovery attacks involve adversaries attempting to collect detailed information about the system they’ve infiltrated. Attackers gather data about the operating system, local users, network configurations, system owner, active connections, and network shares. This information is typically used to plan further exploitation, lateral movement, and privilege escalation within the target network. By querying system properties, user accounts, and network settings, attackers gain the intelligence necessary for executing advanced attacks. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling quick detection of abnormal activities like unauthorized information gathering from system and network resources.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of suspicious activity without negatively impacting system performance. CAMS is capable of identifying the unauthorized collection of system, user, or network-related data, helping to detect when attackers are gathering intelligence for the purpose of launching further attacks.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1016",
            "attack_object_name": "System Network Configuration Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT) and CrowdStrike Falcon Accelerated Memory Scanning (CAMS): Defending Against System, Owner, User, and Network Information Discovery Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Advanced Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of System, Owner, User, and Network Information Discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nSystem, Owner, User, and Network Information Discovery attacks involve adversaries attempting to collect detailed information about the system they’ve infiltrated. Attackers gather data about the operating system, local users, network configurations, system owner, active connections, and network shares. This information is typically used to plan further exploitation, lateral movement, and privilege escalation within the target network. By querying system properties, user accounts, and network settings, attackers gain the intelligence necessary for executing advanced attacks. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling quick detection of abnormal activities like unauthorized information gathering from system and network resources.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of suspicious activity without negatively impacting system performance. CAMS is capable of identifying the unauthorized collection of system, user, or network-related data, helping to detect when attackers are gathering intelligence for the purpose of launching further attacks.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1082",
            "attack_object_name": "System Information Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "CrowdStrike and Intel have co-engineered an Accelerated memory scanning (CAMS) capability based on Intel Threat Detection Technology. \n\nThis dynamic solution enhances CrowdStrike Falcon security by detecting cyber threats earlier in the kill chain and in real-time by offloading the Falcon sensor's performance-intensive memory scans from the CPU to the Intel Integrated GPU.\n\nAMS is able to prevent the running of executables masquerading as other files, execution of potentially malicious files, and suspicious behavior patterns from occurring on endpoint systems (e.g., suspicious process, file, API call, etc.).",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1012",
            "attack_object_name": "Query Registry",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Query Registry attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nQuery Registry attacks involve adversaries accessing and querying the Windows Registry to gather sensitive information or identify potential attack vectors. Attackers use the registry to collect system configuration details, credentials, software information, and other valuable data that may help in lateral movement, privilege escalation, or other malicious activities. Intel TDT plays a critical role in detecting these activities by providing real-time telemetry on program execution, memory access, and control flow, allowing rapid identification of abnormal behaviors such as unauthorized registry queries.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of suspicious activity without degrading system performance. CAMS can identify malicious behaviors such as unauthorized registry access or attempts to extract sensitive data through registry queries, providing proactive defense against this form of reconnaissance.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1518",
            "attack_object_name": "Software Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Software Discovery attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nSoftware Discovery attacks involve adversaries attempting to map or discover software applications running on a target system. Attackers often use these techniques to gather information about the environment and identify potential vulnerabilities, misconfigurations, or software weaknesses that can be exploited to further compromise the system. Intel TDT plays a crucial role in identifying these tactics by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors such as unauthorized scanning or probing of installed software.\n\nIn addition, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without degrading system performance. CAMS can identify suspicious behaviors, such as attempts to discover or fingerprint software applications and services running on the system, providing proactive defense against these reconnaissance techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1070",
            "attack_object_name": "Indicator Removal",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Indicator Removal attacks. This integrated solution enhances CrowdStrike Falcon capabilities, improving its ability to detect and mitigate cyber threats earlier in the kill chain while minimizing system performance impact.\n\nIndicator Removal attacks involve adversaries attempting to erase or alter system logs, forensic artifacts, or other indicators of compromise (IOCs) to evade detection. By removing these telltale signs, attackers aim to avoid triggering security alerts and delay detection, allowing them to maintain persistent access to systems. Intel TDT plays a critical role in identifying these evasive techniques by providing deep, real-time telemetry on program execution, memory access, and control flow. This telemetry allows security teams to detect abnormal behaviors, such as unauthorized manipulation of system logs or tampering with file systems, which are indicative of efforts to remove attack indicators.\n\nIn addition, CAMS offloads memory scanning tasks from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activities without sacrificing system performance. CAMS helps identify suspicious actions, such as attempts to alter or delete logs, modify file system attributes, or hide evidence of compromise in memory.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1083",
            "attack_object_name": "File and Directory Discovery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of File and Directory Discovery attacks. This integrated solution improves CrowdStrike Falcon, enabling it to detect and mitigate cyber threats earlier in the kill chain, with minimal impact on system performance.\n\nFile and Directory Discovery attacks involve adversaries attempting to map or enumerate files, directories, or system resources to identify sensitive information or potential targets for further exploitation. These activities often form the basis for lateral movement, privilege escalation, or data exfiltration. Intel TDT plays a crucial role in detecting these types of attacks by providing deep, real-time telemetry on program execution, memory access, and control flow. This telemetry allows for the rapid identification of suspicious behaviors, such as abnormal access to or enumeration of files and directories, which may indicate an ongoing discovery attack.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activities without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized access attempts to sensitive file locations or attempts to probe the file system for valuable assets.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1573",
            "attack_object_name": "Encrypted Channel",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), integrated with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Encrypted Channel attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nEncrypted channel attacks involve adversaries using encrypted communications channels (such as SSL/TLS or other encryption protocols) to exfiltrate data, command-and-control traffic, or otherwise evade detection. These attacks can obscure the malicious intent of the communication, making it difficult for traditional security tools to identify the content or the true nature of the traffic. Intel TDT plays a key role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This telemetry allows for rapid detection of suspicious encrypted traffic patterns, such as abnormal SSL/TLS traffic, which could indicate malicious activities like data exfiltration or command-and-control (C2) communication.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster and more efficient detection of encrypted channel activities without impacting system performance. CAMS helps identify suspicious behaviors such as unauthorized encryption processes or attempts to hide malicious traffic within encrypted channels, offering a proactive defense against attacks that seek to bypass detection.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1059",
            "comments": "Intel Threat Detection Technology (TDT), integrated with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of PowerShell attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nPowerShell attacks involve adversaries using PowerShell scripts or commands to execute malicious actions, such as downloading payloads, executing remote commands, or performing other activities designed to evade detection. PowerShell is a powerful tool often leveraged by attackers to bypass security controls, escalate privileges, or maintain persistence on compromised systems. Intel TDT plays a key role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious PowerShell activity such as script execution or abnormal command-line behavior that could signal malicious actions.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activity without negatively impacting system performance. CAMS helps identify suspicious behaviors such as the execution of unauthorized PowerShell scripts or the use of PowerShell for payload delivery, data exfiltration, or privilege escalation.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059.001",
            "attack_object_name": "PowerShell",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1059",
            "comments": "Intel Threat Detection Technology (TDT), integrated with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of PowerShell attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nPowerShell attacks involve adversaries using PowerShell scripts or commands to execute malicious actions, such as downloading payloads, executing remote commands, or performing other activities designed to evade detection. PowerShell is a powerful tool often leveraged by attackers to bypass security controls, escalate privileges, or maintain persistence on compromised systems. Intel TDT plays a key role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious PowerShell activity such as script execution or abnormal command-line behavior that could signal malicious actions.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activity without negatively impacting system performance. CAMS helps identify suspicious behaviors such as the execution of unauthorized PowerShell scripts or the use of PowerShell for payload delivery, data exfiltration, or privilege escalation.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), integrated with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of command and scripting interpreter attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nCommand and scripting interpreter attacks involve adversaries exploiting command-line interfaces (such as PowerShell, cmd.exe, or Bash) or scripting languages to execute unauthorized commands or scripts. These attacks can be used to bypass traditional security measures, gain unauthorized access, or execute malicious payloads. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious behavior such as abnormal use of command-line interpreters or scripts that could indicate malicious activity.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the execution of unauthorized scripts, commands, or PowerShell scripts, which are often used to escalate privileges, exfiltrate data, or deliver additional malicious payloads.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1059",
            "attack_object_name": "Command and Scripting Interpreter",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), integrated with CrowdStrike Falcon Accelerated  Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of command and scripting interpreter attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nCommand and scripting interpreter attacks involve adversaries exploiting command-line interfaces (such as PowerShell, cmd.exe, or Bash) or scripting languages to execute unauthorized commands or scripts. These attacks can be used to bypass traditional security measures, gain unauthorized access, or execute malicious payloads. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious behavior such as abnormal use of command-line interpreters or scripts that could indicate malicious activity.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as the execution of unauthorized scripts, commands, or PowerShell scripts, which are often used to escalate privileges, exfiltrate data, or deliver additional malicious payloads.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in conjunction with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of boot or logon autostart attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nBoot or logon autostart attacks involve adversaries adding malicious code to system startup or user logon processes, enabling malware to run automatically when the system is booted or when a user logs in. This technique is commonly used to maintain persistence and ensure that the malware is executed every time the system is restarted or a user session begins. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as unauthorized autostart processes that could indicate an attack or compromise.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to boot or logon scripts, registry keys, or other autostart mechanisms used to execute malicious code during system startup or user login.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1547",
            "attack_object_name": "Boot or Logon Autostart Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), in conjunction with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of boot or logon autostart attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nBoot or logon autostart attacks involve adversaries adding malicious code to system startup or user logon processes, enabling malware to run automatically when the system is booted or when a user logs in. This technique is commonly used to maintain persistence and ensure that the malware is executed every time the system is restarted or a user session begins. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as unauthorized autostart processes that could indicate an attack or compromise.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to boot or logon scripts, registry keys, or other autostart mechanisms used to execute malicious code during system startup or user login.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1564.004",
            "attack_object_name": "NTFS File Attributes",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1564",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of NTFS File Attribute Manipulation attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nNTFS File Attribute Manipulation techniques involve adversaries altering file system attributes (such as hidden or system file flags) to conceal malicious files or evade detection by security tools. These techniques are commonly used to hide files, make them appear legitimate, or prevent them from being scanned by traditional security defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of abnormal behaviors that could indicate unauthorized changes to NTFS file attributes.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to NTFS file attributes, providing proactive defense against these evasive attack techniques and strengthening the protection of critical systems.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1564.004",
            "attack_object_name": "NTFS File Attributes",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1564",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of NTFS File Attribute Manipulation attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nNTFS File Attribute Manipulation techniques involve adversaries altering file system attributes (such as hidden or system file flags) to conceal malicious files or evade detection by security tools. These techniques are commonly used to hide files, make them appear legitimate, or prevent them from being scanned by traditional security defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of abnormal behaviors that could indicate unauthorized changes to NTFS file attributes.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications to NTFS file attributes, providing proactive defense against these evasive attack techniques and strengthening the protection of critical systems.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1564",
            "attack_object_name": "Hide Artifacts",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time protection of Hide Artifacts attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nHide artifacts techniques involve adversaries attempting to conceal the traces of their malicious activities, such as files, processes, or registry keys, to evade detection by security tools. These attacks are designed to obscure the presence of malware, backdoors, or unauthorized actions, making it difficult for traditional security defenses to identify and respond. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of abnormal behaviors that may indicate attempts to hide malicious artifacts or modify system data.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications or attempts to conceal malicious processes, files, or other artifacts, providing proactive defense against these stealthy attack techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1564",
            "attack_object_name": "Hide Artifacts",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), strengthens cybersecurity defenses by enabling faster, real-time detection of Hide Artifacts attacks. This integrated solution enhances CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nHide artifacts techniques involve adversaries attempting to conceal the traces of their malicious activities, such as files, processes, or registry keys, to evade detection by security tools. These attacks are designed to obscure the presence of malware, backdoors, or unauthorized actions, making it difficult for traditional security defenses to identify and respond. Intel TDT plays a crucial role by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of abnormal behaviors that may indicate attempts to hide malicious artifacts or modify system data.\n\nAdditionally, CAMS offloads the performance-intensive task of memory scanning from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized modifications or attempts to conceal malicious processes, files, or other artifacts, providing proactive defense against these stealthy attack techniques.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1204",
            "attack_object_name": "User Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection and protection of User Execution attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nUser Execution attacks typically involve adversaries tricking or coercing users into executing malicious payloads, often through social engineering techniques such as phishing emails, malicious attachments, or misleading links. Once the user unknowingly runs the malicious file or code, it can lead to a wide range of attacks, including malware installation, system compromise, or data exfiltration. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious user-triggered behaviors, such as unauthorized applications being launched or malicious scripts executed.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster and more efficient detection of malicious activities without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized execution of programs or code that may indicate user execution-based exploitation attempts, providing proactive defense against this common attack vector.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1204",
            "attack_object_name": "User Execution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology (TDT), combined with CrowdStrike Falcon Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of User Execution attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nUser Execution attacks typically involve adversaries tricking or coercing users into executing malicious payloads, often through social engineering techniques such as phishing emails, malicious attachments, or misleading links. Once the user unknowingly runs the malicious file or code, it can lead to a wide range of attacks, including malware installation, system compromise, or data exfiltration. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of suspicious user-triggered behaviors, such as unauthorized applications being launched or malicious scripts executed.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster and more efficient detection of malicious activities without impacting system performance. CAMS helps identify suspicious behaviors, such as unauthorized execution of programs or code that may indicate user execution-based exploitation attempts, providing proactive defense against this common attack vector.",
            "references": [
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) targeted malware detection solution applies machine learning to hardware telemetry derived from the CPU to detect sustained malicious code execution patterns, like ransomware and cryptomining, at runtime. Operating on CPU level data enables TDT to detect malware execution irrespective of deployment scheme, programming language or obfuscation schemes. \n\nThis enables Microsoft Defender Antivirus to use Intel TDT to help rapidly detect and respond to these threats.\n\nIntel Threat Detection Technology (TDT) and CrowdStrike's Accelerated Memory Scanning (AMS): Defending Against Data Encrypted for Impact Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Data Encrypted for Impact attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData Encrypted for Impact refers to the tactic used by adversaries to encrypt data or communication with the intent to cause operational disruption, evade detection, or increase the impact of a cyberattack. This can involve encrypting sensitive files to prevent access or exfiltration, or using encryption as a means to disguise malicious payloads, making it harder for security systems to detect or analyze the malicious data. Ransomware attacks, where data is encrypted and held hostage for a ransom, are a prime example of this tactic.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This detailed telemetry helps security teams quickly detect suspicious behaviors, such as the use of encryption algorithms, unauthorized encryption of sensitive data, or abnormal interactions with file systems that could indicate an attempt to encrypt or obfuscate data for malicious purposes.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1486",
            "attack_object_name": "Data Encrypted for Impact",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) targeted malware detection solution applies machine learning to hardware telemetry derived from the CPU to detect sustained malicious code execution patterns, like ransomware and cryptomining, at runtime. Operating on CPU level data enables TDT to detect malware execution irrespective of deployment scheme, programming language or obfuscation schemes. \n\nThis enables Microsoft Defender Antivirus to use Intel TDT to help rapidly detect and respond to these threats.\n\nIntel Threat Detection Technology (TDT) and CrowdStrike's Accelerated Memory Scanning (AMS): Defending Against Data Encrypted for Impact Attacks\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Data Encrypted for Impact attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData Encrypted for Impact refers to the tactic used by adversaries to encrypt data or communication with the intent to cause operational disruption, evade detection, or increase the impact of a cyberattack. This can involve encrypting sensitive files to prevent access or exfiltration, or using encryption as a means to disguise malicious payloads, making it harder for security systems to detect or analyze the malicious data. Ransomware attacks, where data is encrypted and held hostage for a ransom, are a prime example of this tactic.\n\nIntel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow. This detailed telemetry helps security teams quickly detect suspicious behaviors, such as the use of encryption algorithms, unauthorized encryption of sensitive data, or abnormal interactions with file systems that could indicate an attempt to encrypt or obfuscate data for malicious purposes.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1496",
            "attack_object_name": "Resource Hijacking",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) targeted malware detection solution applies machine learning to hardware telemetry derived from the CPU to detect sustained malicious code execution patterns, like ransomware and cryptomining, at runtime. Operating on CPU level data enables TDT to detect malware execution irrespective of deployment scheme, programming language or obfuscation schemes. \n\nThis enables Microsoft Defender Antivirus to use Intel TDT to help rapidly detect and respond to these threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1564.006",
            "attack_object_name": "Run Virtual Instance",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1564",
            "comments": "Intel Threat Detection Technology's (Intel TDT) targeted malware detection solution applies machine learning to hardware telemetry derived from the CPU to detect sustained malicious code execution patterns, like ransomware and cryptomining, at runtime. Operating on CPU level data enables TDT to detect malware execution irrespective of deployment scheme, programming language or obfuscation schemes. \n\nThis enables Microsoft Defender Antivirus to use Intel TDT to help rapidly detect and respond to these threats.",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1204.002",
            "attack_object_name": "Malicious File",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1204",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time protection of Malicious File execution. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nMalicious file attacks typically involve adversaries delivering malicious payloads disguised as legitimate files (e.g., documents, software, or attachments). When a user opens or executes the file, it triggers malicious behavior, such as malware installation, data theft, or system compromise. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of suspicious behaviors, such as the execution of unauthorized or malicious files that could indicate exploitation.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activities without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized file executions or attempts to run malicious code, providing proactive defense against this widespread and highly evasive attack vector.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1204.002",
            "attack_object_name": "Malicious File",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1204",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time protection of Malicious File execution. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nMalicious file attacks typically involve adversaries delivering malicious payloads disguised as legitimate files (e.g., documents, software, or attachments). When a user opens or executes the file, it triggers malicious behavior, such as malware installation, data theft, or system compromise. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of suspicious behaviors, such as the execution of unauthorized or malicious files that could indicate exploitation.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activities without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized file executions or attempts to run malicious code, providing proactive defense against this widespread and highly evasive attack vector.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1204.002",
            "attack_object_name": "Malicious File",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1204",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Malicious File execution. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nMalicious file attacks typically involve adversaries delivering malicious payloads disguised as legitimate files (e.g., documents, software, or attachments). When a user opens or executes the file, it triggers malicious behavior, such as malware installation, data theft, or system compromise. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of suspicious behaviors, such as the execution of unauthorized or malicious files that could indicate exploitation.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activities without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized file executions or attempts to run malicious code, providing proactive defense against this widespread and highly evasive attack vector.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1204.002",
            "attack_object_name": "Malicious File",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1204",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Malicious File execution. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nMalicious file attacks typically involve adversaries delivering malicious payloads disguised as legitimate files (e.g., documents, software, or attachments). When a user opens or executes the file, it triggers malicious behavior, such as malware installation, data theft, or system compromise. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling the rapid detection of suspicious behaviors, such as the execution of unauthorized or malicious files that could indicate exploitation.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster and more efficient detection of malicious activities without degrading system performance. CAMS helps identify suspicious behaviors, such as unauthorized file executions or attempts to run malicious code, providing proactive defense against this widespread and highly evasive attack vector.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time protection of de-obfuscation and file decoding attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nDe-obfuscation and file decoding attacks involve adversaries using techniques to reverse obfuscation or decoding algorithms to reveal and execute malicious code that was previously disguised or hidden. These attacks are commonly used in malware campaigns, where payloads are obfuscated or encoded to evade detection by traditional security tools. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as the de-obfuscation of malicious code or decoding of hidden payloads.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the presence of code attempting to decode or de-obfuscate payloads, enabling organizations to proactively detect and mitigate these evasive techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time protection of de-obfuscation and file decoding attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nDe-obfuscation and file decoding attacks involve adversaries using techniques to reverse obfuscation or decoding algorithms to reveal and execute malicious code that was previously disguised or hidden. These attacks are commonly used in malware campaigns, where payloads are obfuscated or encoded to evade detection by traditional security tools. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as the de-obfuscation of malicious code or decoding of hidden payloads.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the presence of code attempting to decode or de-obfuscate payloads, enabling organizations to proactively detect and mitigate these evasive techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of deobfuscation and file decoding attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nDe-obfuscation and file decoding attacks involve adversaries using techniques to reverse obfuscation or decoding algorithms to reveal and execute malicious code that was previously disguised or hidden. These attacks are commonly used in malware campaigns, where payloads are obfuscated or encoded to evade detection by traditional security tools. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as the de-obfuscation of malicious code or decoding of hidden payloads.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the presence of code attempting to decode or de-obfuscate payloads, enabling organizations to proactively detect and mitigate these evasive techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1140",
            "attack_object_name": "Deobfuscate/Decode Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of deobfuscation and file decoding attacks. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nDe-obfuscation and file decoding attacks involve adversaries using techniques to reverse obfuscation or decoding algorithms to reveal and execute malicious code that was previously disguised or hidden. These attacks are commonly used in malware campaigns, where payloads are obfuscated or encoded to evade detection by traditional security tools. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors, such as the de-obfuscation of malicious code or decoding of hidden payloads.\n\nAdditionally, CAMS offloads the performance-intensive memory scanning workload from the CPU to the Intel Integrated GPU, ensuring faster and more efficient detection of malicious activity without impacting system performance. CAMS helps identify suspicious behaviors, such as the presence of code attempting to decode or de-obfuscate payloads, enabling organizations to proactively detect and mitigate these evasive techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of data encoding attacks. This integrated solution strengthens CrowdStrike’s Next-Generation Antivirus (NGAV), improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData encoding attacks involve adversaries using techniques like base64 or other encoding methods to obfuscate malicious payloads or bypass security controls. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate encoded payloads or attempts to hide malicious activity.\n\nCAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, including encoded data execution or payloads attempting to masquerade as legitimate processes.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1132",
            "attack_object_name": "Data Encoding",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of data encoding attacks. This integrated solution strengthens CrowdStrike’s Next-Generation Antivirus (NGAV), improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nData encoding attacks involve adversaries using techniques like base64 or other encoding methods to obfuscate malicious payloads or bypass security controls. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, enabling rapid detection of abnormal behaviors that could indicate encoded payloads or attempts to hide malicious activity.\n\nCAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, allowing for faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, including encoded data execution or payloads attempting to masquerade as legitimate processes.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), in combination with CrowdStrike's Accelerated Memory Scanning (CAMS), significantly enhances cybersecurity defenses by enabling the real-time detection of Obfuscated Files or Information (T1027). This integrated solution strengthens CrowdStrike Falcon by improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nObfuscated Files or Information (T1027) refers to adversaries using techniques to obfuscate their payloads, making it harder for traditional security measures to detect malicious code or data. Common obfuscation methods include packing, encryption, or using alternative encoding schemes to hide the true intent of the files. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, helping security teams detect abnormal behaviors such as suspicious attempts to decode or unpack files, or attempts to execute obfuscated code.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027",
            "attack_object_name": "Obfuscated Files or Information",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), in combination with CrowdStrike's Accelerated Memory Scanning (CAMS), significantly enhances cybersecurity defenses by enabling the real-time detection of Obfuscated Files or Information (T1027). This integrated solution strengthens CrowdStrike Falcon by improving its ability to detect and mitigate cyber threats earlier in the kill chain, while minimizing system performance impact.\n\nObfuscated Files or Information (T1027) refers to adversaries using techniques to obfuscate their payloads, making it harder for traditional security measures to detect malicious code or data. Common obfuscation methods include packing, encryption, or using alternative encoding schemes to hide the true intent of the files. Intel TDT plays a critical role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, helping security teams detect abnormal behaviors such as suspicious attempts to decode or unpack files, or attempts to execute obfuscated code.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.001",
            "attack_object_name": "Binary Padding",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.001",
            "attack_object_name": "Binary Padding",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.002",
            "attack_object_name": "Software Packing",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "crwd-ams",
            "attack_object_id": "T1027.002",
            "attack_object_name": "Software Packing",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Software Packing exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nSoftware Packing attacks involve adversaries using packing tools to compress or encrypt executable files to evade detection by traditional security tools. These techniques are designed to obscure the true nature of malicious files, making it harder for signature-based detection systems to identify threats. Once unpacked, the malicious payload can execute, often bypassing conventional defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect abnormal behaviors, such as suspicious unpacking processes or code injection attempts that could indicate software packing or other evasion tactics.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as attempts to unpack or manipulate files, providing proactive defense against evasive software packing techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.002",
            "attack_object_name": "Software Packing",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).\n\nIntel Threat Detection Technology (TDT), combined with CrowdStrike's Accelerated  Memory Scanning (CAMS), enhances cybersecurity defenses by enabling faster, real-time detection of Software Packing exploits. This integrated solution strengthens CrowdStrike Falcon, improving its ability to detect and mitigate cyber threats earlier in the kill chain, all while minimizing system performance impact.\n\nSoftware Packing attacks involve adversaries using packing tools to compress or encrypt executable files to evade detection by traditional security tools. These techniques are designed to obscure the true nature of malicious files, making it harder for signature-based detection systems to identify threats. Once unpacked, the malicious payload can execute, often bypassing conventional defenses. Intel TDT plays a crucial role in identifying these threats by providing real-time telemetry on program execution, memory access, and control flow, allowing security teams to detect abnormal behaviors, such as suspicious unpacking processes or code injection attempts that could indicate software packing or other evasion tactics.\n\nAdditionally, CAMS offloads the memory scanning workload from the CPU to the Intel Integrated GPU, enabling faster, more efficient detection of malicious activity without degrading system performance. CAMS helps identify suspicious behaviors, such as attempts to unpack or manipulate files, providing proactive defense against evasive software packing techniques.",
            "references": [
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/2022-09/intel-crowdstrike-solution-brief.pdf",
                "https://www.intel.com/content/www/us/en/it-management/intel-it-best-practices/advancing-intels-security-posture-with-crowdstrike.html",
                "https://www.crowdstrike.com/en-us/blog/falcon-enhances-fileless-attack-detection-with-accelerated-memory-scanning/",
                "https://attack.mitre.org/techniques/T1204/002/",
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.003",
            "attack_object_name": "Steganography",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.003",
            "attack_object_name": "Steganography",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.004",
            "attack_object_name": "Compile After Delivery",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.004",
            "attack_object_name": "Compile After Delivery",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.005",
            "attack_object_name": "Indicator Removal from Tools",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.005",
            "attack_object_name": "Indicator Removal from Tools",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.007",
            "attack_object_name": "Dynamic API Resolution",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.007",
            "attack_object_name": "Dynamic API Resolution",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.008",
            "attack_object_name": "Stripped Payloads",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.009",
            "attack_object_name": "Embedded Payloads",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.010",
            "attack_object_name": "Command Obfuscation",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.011",
            "attack_object_name": "Fileless Storage",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "capability_group": "advanced_threat_protection",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-tdt",
            "capability_description": "Intel Threat Detection Technology",
            "mapping_type": "win11-def",
            "attack_object_id": "T1027.013",
            "attack_object_name": "Encrypted/Encoded File",
            "capability_group": "advanced_threat_protection",
            "score_category": "detect",
            "score_value": "significant",
            "related_score": "T1027",
            "comments": "Intel Threat Detection Technology's (Intel TDT) Accelerated Memory Scanning (AMS) enables efficient memory scanning by offloading these operations to the integrated Graphics Processor Unit (integrated GPU) on Intel client SoCs. \n\nMicrosoft Defender Antivirus leverages AMS to optimize the detection of polymorphic and fileless attacks, improving resource efficiency and reducing the performance impact on the Central Processing Unit (CPU).",
            "references": [
                "https://www.intel.com/content/www/us/en/architecture-and-technology/vpro/hardware-shield/threat-detection-technology.html",
                "https://learn.microsoft.com/en-us/defender-endpoint/hardware-acceleration-and-mdav"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1556.002",
            "attack_object_name": "Password Filter DLL",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1556",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\r\n\r\nEnhanced Sign-In Security (ESS) will prevent unauthorized processes from requesting credentials since it runs in Virtual Trust Level 1. \r\n\r\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/tlfs/vsm",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1556.008",
            "attack_object_name": "Network Provider DLL",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1556",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nEnhanced Sign-In Security (ESS) will prevent unauthorized processes from requesting credentials since it runs in Virtual Trust Level 1. \n\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/tlfs/vsm",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1056.004",
            "attack_object_name": "Credential API Hooking",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1056",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nEnhanced Sign-In Security (ESS) will prevent credential API hooking by virtue of it running in Virtual Trust Level 1 (VTL1) isolated environment.\n\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/tlfs/vsm",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1136.003",
            "attack_object_name": "Cloud Account",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1136",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\r\n\r\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1555.005",
            "attack_object_name": "Password Managers",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1555",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\r\n\r\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1555.004",
            "attack_object_name": "Windows Credential Manager",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1555",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\r\n\r\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1555.003",
            "attack_object_name": "Credentials from Web Browsers",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1555",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\r\n\r\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1552.001",
            "attack_object_name": "Credentials In Files",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1552",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1056.003",
            "attack_object_name": "Web Portal Capture",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1056",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nIf the user is relying on passkeys instead of passwords, Hello will mitigate the risk by avoiding the use of credentials that can be captured.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1534",
            "attack_object_name": "Internal Spearphishing",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello can provide some protection against spearphishing, particularly by mitigating credential theft through phishing. Is a user is using passkeys; it reduces the risk since passkeys cannot be phished.\n\nWindows Hello enables biometrics or PIN authentication, eliminating the need for a password. Phishing techniques are more related to social engineering and still may be possible, hence marked as Partial.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1566",
            "attack_object_name": "Phishing",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nPasskeys are not phishable like traditional passwords. When using Windows Hello, users authenticate with biometrics (face, fingerprint) or a PIN, which are not transmitted over the network and cannot be intercepted by phishing attacks.\n\nWindows Hello generates a unique key pair for each relying party (e.g., websites, services). This means even if one key is compromised, it cannot be used to access other services. Phishing techniques are more related to social engineering and still may be possible, hence marked as Partial.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://www.microsoft.com/en-us/security/blog/2022/07/12/from-cookie-theft-to-bec-attackers-use-aitm-phishing-sites-as-entry-point-to-further-financial-fraud/",
                "https://jeffreyappel.nl/protect-against-aitm-mfa-phishing-attacks-using-microsoft-technology/#:~:text=Only%20FIDO2%2C%20Windows%20Hello%20for%20Business%2C%20and%20Certificate-based,can%20be%20enriched%20with%20additional%20Conditional%20Access%20protection."
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1021.001",
            "attack_object_name": "Remote Desktop Protocol",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1021",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nMicrosoft Windows emulates a smart card and uses the Windows Hello keys that are tied to user certificates that used for authentication for remote services such as Remote Desktop Protocol making difficult for an attacker to use those credentials.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/rdp-sign-in?tabs=intune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1021",
            "attack_object_name": "Remote Services",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nMicrosoft Windows emulates a smart card and uses the Windows Hello keys that are tied to user certificates that used for authentication for remote services such as Remote Desktop Protocol making difficult for an attacker to use those credentials.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/rdp-sign-in?tabs=intune",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1621",
            "attack_object_name": "Multi-Factor Authentication Request Generation",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1556.006",
            "attack_object_name": "Multi-Factor Authentication",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1556",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1556",
            "attack_object_name": "Modify Authentication Process",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nThe Windows biometric components running in VBS (Intel VT-x) establish a secure channel in real-time to the ESS biometric sensor. When a matching operation is a success, the biometric components in VBS use the secure channel to authorize the usage of Windows Hello keys for authenticating the user with their identity provider, applications, and services.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/mem/intune/protect/windows-hello",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security#credential-operations",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1110.004",
            "attack_object_name": "Credential Stuffing",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1110",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1110.003",
            "attack_object_name": "Password Spraying",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1110",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1110.002",
            "attack_object_name": "Password Cracking",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1110",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1110.001",
            "attack_object_name": "Password Guessing",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1110",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1110",
            "attack_object_name": "Brute Force",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1098.002",
            "attack_object_name": "Additional Email Delegate Permissions",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "minimal",
            "related_score": "T1098",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1098",
            "attack_object_name": "Account Manipulation",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "minimal",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/tlfs/vsm",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1136.002",
            "attack_object_name": "Domain Account",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "related_score": "T1136",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1136",
            "attack_object_name": "Create Account",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "partial",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1078.003",
            "attack_object_name": "Local Accounts",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1078",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1078.001",
            "attack_object_name": "Default Accounts",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1078",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1078",
            "attack_object_name": "Valid Accounts",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        },
        {
            "capability_id": "intel-ptt",
            "capability_description": "Intel Platform Trust Technology",
            "mapping_type": "win11-ess-hello",
            "attack_object_id": "T1078.002",
            "attack_object_name": "Domain Accounts",
            "capability_group": "trusted_computing",
            "score_category": "protect",
            "score_value": "significant",
            "related_score": "T1078",
            "comments": "Windows Hello ESS authentication leverages virtual sandbox(Intel VT-X) to protect authentication data to significantly reduce the risk of brute force attacks on passwords, as biometrics typically require physical presence or biometric data that cannot be easily guessed or replicated. It uses the TPM (Intel PTT) to store authentication data including public/private key pairs. Windows Hello also includes Passkeys, a passwordless authentication option that generates public/private key pair with the public key shared with the service requiring authentication and the private key stored in the TPM, which is only released after authentication locally on the device using either a biometric factor such as fingerprint, facial recognition, or a PIN. Windows Hello helps protect against the risk of credentials being stored in files by eliminating the need for passwords in many authentication scenarios.\n\nWindows Hello utilizes passkeys which helps protect against the risk of credentials being stored in files by eliminating the need for passwords.",
            "references": [
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passwordless-strategy/",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/faq",
                "https://support.microsoft.com/en-us/windows/passkeys-overview-301c8944-5ea2-452b-9886-97e4d2ef4422",
                "https://learn.microsoft.com/en-us/windows/security/identity-protection/passkeys/?tabs=windows%2Cintune",
                "https://www.intel.com/content/dam/www/central-libraries/us/en/documents/white-paper-intel-hardware-shield.pdf",
                "https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello-enhanced-sign-in-security",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/trusted-platform-module.html ",
                "https://www.intel.com/content/www/us/en/business/enterprise-computers/resources/virtualization-security.html"
            ],
            "status": "complete"
        }
    ]
}